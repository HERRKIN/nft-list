"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connect = exports.connectIfSessionExists = void 0;
const browser_check_1 = require("@terra-dev/browser-check");
const walletconnect_qrcode_modal_1 = require("@terra-dev/walletconnect-qrcode-modal");
const core_1 = __importDefault(require("@walletconnect/core"));
const cryptoLib = __importStar(require("@walletconnect/iso-crypto"));
const utils_1 = require("@walletconnect/utils");
const rxjs_1 = require("rxjs");
const errors_1 = require("./errors");
const socket_transport_1 = __importDefault(require("./impl/socket-transport"));
const types_1 = require("./types");
const WALLETCONNECT_STORAGE_KEY = 'walletconnect';
function connectIfSessionExists(options = {}) {
    const storedSession = localStorage.getItem(WALLETCONNECT_STORAGE_KEY);
    if (typeof storedSession === 'string') {
        return connect(options, true);
    }
    return null;
}
exports.connectIfSessionExists = connectIfSessionExists;
function connect(options = {}, useCachedSession = false) {
    var _a, _b;
    let connector = null;
    let sessionSubject = new rxjs_1.BehaviorSubject({
        status: types_1.WalletConnectSessionStatus.DISCONNECTED,
    });
    const qrcodeModal = (_b = (_a = options.connectorOpts) === null || _a === void 0 ? void 0 : _a.qrcodeModal) !== null && _b !== void 0 ? _b : new walletconnect_qrcode_modal_1.TerraWalletconnectQrcodeModal();
    const connectorOpts = {
        bridge: 'https://walletconnect.terra.dev/',
        qrcodeModal,
        ...options.connectorOpts,
    };
    const pushServerOpts = options.pushServerOpts;
    // ---------------------------------------------
    // event listeners
    // ---------------------------------------------
    function initEvents() {
        if (!connector) {
            throw new Error(`WalletConnect is not defined!`);
        }
        connector.on('session_update', async (error, payload) => {
            if (error)
                throw error;
            sessionSubject.next({
                status: types_1.WalletConnectSessionStatus.CONNECTED,
                peerMeta: payload.params[0],
                terraAddress: payload.params[0].accounts[0],
                chainId: payload.params[0].chainId,
            });
            console.log('WALLETCONNECT SESSION UPDATED:', payload.params[0]);
        });
        connector.on('connect', (error, payload) => {
            if (error)
                throw error;
            sessionSubject.next({
                status: types_1.WalletConnectSessionStatus.CONNECTED,
                peerMeta: payload.params[0],
                terraAddress: payload.params[0].accounts[0],
                chainId: payload.params[0].chainId,
            });
        });
        connector.on('disconnect', (error, payload) => {
            if (error)
                throw error;
            sessionSubject.next({
                status: types_1.WalletConnectSessionStatus.DISCONNECTED,
            });
        });
    }
    // ---------------------------------------------
    // initialize
    // ---------------------------------------------
    const cachedSession = localStorage.getItem('walletconnect');
    if (typeof cachedSession === 'string' && useCachedSession) {
        const cachedSessionObject = JSON.parse(cachedSession);
        const clientId = cachedSessionObject.clientId;
        const draftConnector = new core_1.default({
            connectorOpts: {
                ...connectorOpts,
                session: JSON.parse(cachedSession),
            },
            pushServerOpts,
            cryptoLib,
            transport: new socket_transport_1.default({
                protocol: 'wc',
                version: 1,
                url: connectorOpts.bridge,
                subscriptions: [clientId],
            }),
        });
        draftConnector.clientId = clientId;
        connector = draftConnector;
        initEvents();
        sessionSubject.next({
            status: types_1.WalletConnectSessionStatus.CONNECTED,
            peerMeta: draftConnector.peerMeta,
            terraAddress: draftConnector.accounts[0],
            chainId: draftConnector.chainId,
        });
    }
    else {
        const clientId = utils_1.uuid();
        const draftConnector = new core_1.default({
            connectorOpts,
            pushServerOpts,
            cryptoLib,
            transport: new socket_transport_1.default({
                protocol: 'wc',
                version: 1,
                url: connectorOpts.bridge,
                subscriptions: [clientId],
            }),
        });
        draftConnector.clientId = clientId;
        connector = draftConnector;
        if (!draftConnector.connected) {
            draftConnector.createSession().catch(console.error);
            if (qrcodeModal instanceof walletconnect_qrcode_modal_1.TerraWalletconnectQrcodeModal) {
                qrcodeModal.setCloseCallback(() => {
                    sessionSubject.next({
                        status: types_1.WalletConnectSessionStatus.DISCONNECTED,
                    });
                });
            }
            initEvents();
            sessionSubject.next({
                status: types_1.WalletConnectSessionStatus.REQUESTED,
            });
        }
    }
    // ---------------------------------------------
    // methods
    // ---------------------------------------------
    function disconnect() {
        if (connector && connector.connected) {
            try {
                connector.killSession();
            }
            catch (_a) { }
        }
        sessionSubject.next({
            status: types_1.WalletConnectSessionStatus.DISCONNECTED,
        });
    }
    function session() {
        return sessionSubject.asObservable();
    }
    function getLatestSession() {
        return sessionSubject.getValue();
    }
    /**
     * post transaction
     *
     * @param tx transaction data
     * @throws { WalletConnectUserDenied }
     * @throws { WalletConnectCreateTxFailed }
     * @throws { WalletConnectTxFailed }
     * @throws { WalletConnectTimeout }
     * @throws { WalletConnectTxUnspecifiedError }
     */
    function post(tx) {
        var _a, _b, _c;
        if (!connector || !connector.connected) {
            throw new Error(`WalletConnect is not connected!`);
        }
        const id = Date.now();
        const serializedTxOptions = {
            msgs: tx.msgs.map((msg) => msg.toJSON()),
            fee: (_a = tx.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),
            memo: tx.memo,
            gasPrices: (_b = tx.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),
            gasAdjustment: (_c = tx.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),
            account_number: tx.account_number,
            sequence: tx.sequence,
            feeDenoms: tx.feeDenoms,
        };
        if (browser_check_1.isMobile()) {
            const payload = btoa(JSON.stringify({
                id,
                handshakeTopic: connector.handshakeTopic,
                params: serializedTxOptions,
            }));
            // FIXME changed walletconnect confirm schema
            window.location.href = `terrastation://walletconnect_confirm/?payload=${payload}`;
            //window.location.href = `terrastation://wallet_connect_confirm?id=${id}&handshakeTopic=${
            //  connector.handshakeTopic
            //}&params=${JSON.stringify([serializedTxOptions])}`;
        }
        return connector
            .sendCustomRequest({
            id,
            method: 'post',
            params: [serializedTxOptions],
        })
            .catch((error) => {
            let throwError = error;
            try {
                const { code, txhash, message, raw_message } = JSON.parse(error.message);
                switch (code) {
                    case 1:
                        throwError = new errors_1.WalletConnectUserDenied();
                        break;
                    case 2:
                        throwError = new errors_1.WalletConnectCreateTxFailed(message);
                        break;
                    case 3:
                        throwError = new errors_1.WalletConnectTxFailed(txhash, message, raw_message);
                        break;
                    case 4:
                        throwError = new errors_1.WalletConnectTimeout(message);
                        break;
                    case 99:
                        throwError = new errors_1.WalletConnectTxUnspecifiedError(message);
                        break;
                }
            }
            catch (_a) {
                throwError = new errors_1.WalletConnectTxUnspecifiedError(error.message);
            }
            throw throwError;
        });
    }
    // ---------------------------------------------
    // return
    // ---------------------------------------------
    return {
        session,
        getLatestSession,
        post,
        disconnect,
    };
}
exports.connect = connect;
//# sourceMappingURL=data:application/json;base64,