"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChromeExtensionController = void 0;
const browser_check_1 = require("@terra-dev/browser-check");
const terra_js_1 = require("@terra-money/terra.js");
const rxjs_1 = require("rxjs");
const extensionFixer_1 = require("./extensionFixer");
const storage_1 = require("./storage");
const types_1 = require("./types");
class ChromeExtensionController {
    constructor(options) {
        this.options = options;
        this.doneFirstCheck = false;
        this.status = () => {
            return this._status.asObservable();
        };
        this.networkInfo = () => {
            return this._networkInfo.asObservable();
        };
        this.terraAddress = () => {
            return this._terraAddress.asObservable();
        };
        this.checkStatus = async (waitingExtensionScriptInjection = false) => {
            // do not check if browser isn't a chrome
            if (!this.isDesktopChrome) {
                return;
            }
            // ignore the checks before first check done
            // first check -------------------------------â†’ done
            // --------------- second check (ignore)
            if (!waitingExtensionScriptInjection && !this.doneFirstCheck) {
                return;
            }
            // check the extension installed
            const isExtensionInstalled = waitingExtensionScriptInjection
                ? await intervalCheck(20, () => this._extension.isAvailable())
                : this._extension.isAvailable();
            this.doneFirstCheck = true;
            if (!isExtensionInstalled) {
                this._status.next(types_1.ChromeExtensionStatus.UNAVAILABLE);
                return;
            }
            // get networkInfo from extension
            const infoPayload = await this._extension.info();
            if (infoPayload &&
                this._networkInfo.getValue().chainID !== infoPayload.chainID) {
                this._networkInfo.next(infoPayload);
            }
            if (this.options.enableWalletConnection) {
                const storageStoredWalletAddress = storage_1.getStoredAddress();
                // if the storage has wallet address
                if (storageStoredWalletAddress &&
                    terra_js_1.AccAddress.validate(storageStoredWalletAddress)) {
                    this._status.next(types_1.ChromeExtensionStatus.WALLET_CONNECTED);
                    // TODO timer check?
                    const connectResult = await this._extension.connect();
                    // if address of extension is not same with the address of localStorage
                    if (connectResult.address &&
                        terra_js_1.AccAddress.validate(connectResult.address)) {
                        storage_1.storeAddress(connectResult.address);
                    }
                    if (!!connectResult.address) {
                        if (this._terraAddress.getValue() !== connectResult.address) {
                            this._terraAddress.next(connectResult.address);
                        }
                    }
                    else {
                        storage_1.clearStore();
                        this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    }
                }
                else {
                    if (storageStoredWalletAddress) {
                        storage_1.clearStore();
                    }
                    this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    this._terraAddress.next(null);
                }
            }
            else {
                this._status.next(types_1.ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                this._terraAddress.next(null);
            }
        };
        this.connect = async () => {
            var _a;
            const result = await this._extension.connect();
            if (result === null || result === void 0 ? void 0 : result.address) {
                const walletAddress = result.address;
                storage_1.storeAddress(walletAddress);
                await this.checkStatus();
            }
            return (_a = result === null || result === void 0 ? void 0 : result.address) !== null && _a !== void 0 ? _a : false;
        };
        this.disconnect = () => {
            storage_1.clearStore();
            this.checkStatus();
        };
        this.recheckStatus = () => {
            if (!this._extension.inTransactionProgress()) {
                this.checkStatus(false);
            }
        };
        this.post = (data) => {
            return this._extension.post(data);
        };
        this.sign = (data) => {
            return this._extension.sign(data);
        };
        this.isDesktopChrome =
            typeof window !== 'undefined' &&
                browser_check_1.isDesktopChrome(options.dangerously__chromeExtensionCompatibleBrowserCheck(navigator.userAgent));
        this._status = new rxjs_1.BehaviorSubject(this.isDesktopChrome
            ? types_1.ChromeExtensionStatus.INITIALIZING
            : types_1.ChromeExtensionStatus.UNAVAILABLE);
        this._networkInfo = new rxjs_1.BehaviorSubject(options.defaultNetwork);
        this._terraAddress = new rxjs_1.BehaviorSubject(storage_1.getStoredAddress());
        this._extension = extensionFixer_1.extensionFixer(new terra_js_1.Extension());
        if (this.isDesktopChrome) {
            this.checkStatus(true);
        }
    }
}
exports.ChromeExtensionController = ChromeExtensionController;
async function intervalCheck(count, fn, intervalMs = 500) {
    let i = -1;
    while (++i < count) {
        if (fn()) {
            return true;
        }
        await new Promise((resolve) => setTimeout(resolve, intervalMs));
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,