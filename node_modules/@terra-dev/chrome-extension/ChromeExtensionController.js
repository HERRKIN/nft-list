import { isDesktopChrome } from '@terra-dev/browser-check';
import { AccAddress, Extension } from '@terra-money/terra.js';
import { BehaviorSubject } from 'rxjs';
import { extensionFixer } from './extensionFixer';
import { clearStore, getStoredAddress, storeAddress } from './storage';
import { ChromeExtensionStatus } from './types';
export class ChromeExtensionController {
    constructor(options) {
        this.options = options;
        this.doneFirstCheck = false;
        this.status = () => {
            return this._status.asObservable();
        };
        this.networkInfo = () => {
            return this._networkInfo.asObservable();
        };
        this.terraAddress = () => {
            return this._terraAddress.asObservable();
        };
        this.checkStatus = async (waitingExtensionScriptInjection = false) => {
            // do not check if browser isn't a chrome
            if (!this.isDesktopChrome) {
                return;
            }
            // ignore the checks before first check done
            // first check -------------------------------â†’ done
            // --------------- second check (ignore)
            if (!waitingExtensionScriptInjection && !this.doneFirstCheck) {
                return;
            }
            // check the extension installed
            const isExtensionInstalled = waitingExtensionScriptInjection
                ? await intervalCheck(20, () => this._extension.isAvailable())
                : this._extension.isAvailable();
            this.doneFirstCheck = true;
            if (!isExtensionInstalled) {
                this._status.next(ChromeExtensionStatus.UNAVAILABLE);
                return;
            }
            // get networkInfo from extension
            const infoPayload = await this._extension.info();
            if (infoPayload &&
                this._networkInfo.getValue().chainID !== infoPayload.chainID) {
                this._networkInfo.next(infoPayload);
            }
            if (this.options.enableWalletConnection) {
                const storageStoredWalletAddress = getStoredAddress();
                // if the storage has wallet address
                if (storageStoredWalletAddress &&
                    AccAddress.validate(storageStoredWalletAddress)) {
                    this._status.next(ChromeExtensionStatus.WALLET_CONNECTED);
                    // TODO timer check?
                    const connectResult = await this._extension.connect();
                    // if address of extension is not same with the address of localStorage
                    if (connectResult.address &&
                        AccAddress.validate(connectResult.address)) {
                        storeAddress(connectResult.address);
                    }
                    if (!!connectResult.address) {
                        if (this._terraAddress.getValue() !== connectResult.address) {
                            this._terraAddress.next(connectResult.address);
                        }
                    }
                    else {
                        clearStore();
                        this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    }
                }
                else {
                    if (storageStoredWalletAddress) {
                        clearStore();
                    }
                    this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                    this._terraAddress.next(null);
                }
            }
            else {
                this._status.next(ChromeExtensionStatus.WALLET_NOT_CONNECTED);
                this._terraAddress.next(null);
            }
        };
        this.connect = async () => {
            var _a;
            const result = await this._extension.connect();
            if (result === null || result === void 0 ? void 0 : result.address) {
                const walletAddress = result.address;
                storeAddress(walletAddress);
                await this.checkStatus();
            }
            return (_a = result === null || result === void 0 ? void 0 : result.address) !== null && _a !== void 0 ? _a : false;
        };
        this.disconnect = () => {
            clearStore();
            this.checkStatus();
        };
        this.recheckStatus = () => {
            if (!this._extension.inTransactionProgress()) {
                this.checkStatus(false);
            }
        };
        this.post = (data) => {
            return this._extension.post(data);
        };
        this.sign = (data) => {
            return this._extension.sign(data);
        };
        this.isDesktopChrome =
            typeof window !== 'undefined' &&
                isDesktopChrome(options.dangerously__chromeExtensionCompatibleBrowserCheck(navigator.userAgent));
        this._status = new BehaviorSubject(this.isDesktopChrome
            ? ChromeExtensionStatus.INITIALIZING
            : ChromeExtensionStatus.UNAVAILABLE);
        this._networkInfo = new BehaviorSubject(options.defaultNetwork);
        this._terraAddress = new BehaviorSubject(getStoredAddress());
        this._extension = extensionFixer(new Extension());
        if (this.isDesktopChrome) {
            this.checkStatus(true);
        }
    }
}
async function intervalCheck(count, fn, intervalMs = 500) {
    let i = -1;
    while (++i < count) {
        if (fn()) {
            return true;
        }
        await new Promise((resolve) => setTimeout(resolve, intervalMs));
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,