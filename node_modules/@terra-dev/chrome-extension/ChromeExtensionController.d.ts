import { NetworkInfo } from '@terra-dev/wallet-types';
import { BehaviorSubject } from 'rxjs';
import { FixedExtension } from './extensionFixer';
import { ChromeExtensionStatus } from './types';
export interface ChromeExtensionControllerOptions {
    defaultNetwork: NetworkInfo;
    enableWalletConnection: boolean;
    dangerously__chromeExtensionCompatibleBrowserCheck: (userAgent: string) => boolean;
}
export declare class ChromeExtensionController {
    readonly options: ChromeExtensionControllerOptions;
    readonly _status: BehaviorSubject<ChromeExtensionStatus>;
    readonly _networkInfo: BehaviorSubject<NetworkInfo>;
    readonly _terraAddress: BehaviorSubject<string | null>;
    readonly _extension: FixedExtension;
    private doneFirstCheck;
    private readonly isDesktopChrome;
    constructor(options: ChromeExtensionControllerOptions);
    status: () => import("rxjs").Observable<ChromeExtensionStatus>;
    networkInfo: () => import("rxjs").Observable<NetworkInfo>;
    terraAddress: () => import("rxjs").Observable<string | null>;
    checkStatus: (waitingExtensionScriptInjection?: boolean) => Promise<void>;
    connect: () => Promise<string | false>;
    disconnect: () => void;
    recheckStatus: () => void;
    post: <SendData extends {}, Payload extends {}>(data: SendData) => Promise<{
        name: string;
        payload: Payload;
    }>;
    sign: <SendData extends {}, Payload extends {}>(data: SendData) => Promise<{
        name: string;
        payload: Payload;
    }>;
}
