"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectedWallet = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const react_1 = require("react");
const types_1 = require("./types");
const useWallet_1 = require("./useWallet");
function useConnectedWallet() {
    const { status, network, wallets, post, sign } = useWallet_1.useWallet();
    const value = react_1.useMemo(() => {
        try {
            if (status === types_1.WalletStatus.WALLET_CONNECTED &&
                wallets.length > 0 &&
                terra_js_1.AccAddress.validate(wallets[0].terraAddress)) {
                const { terraAddress, connectType, design } = wallets[0];
                return {
                    network,
                    terraAddress: terraAddress,
                    walletAddress: terraAddress,
                    design,
                    post: (tx) => {
                        return post(tx, { terraAddress });
                    },
                    sign: (tx) => {
                        return sign(tx, { terraAddress });
                    },
                    availablePost: connectType === types_1.ConnectType.WEB_CONNECT ||
                        connectType === types_1.ConnectType.CHROME_EXTENSION ||
                        connectType === types_1.ConnectType.WALLETCONNECT,
                    availableSign: connectType === types_1.ConnectType.CHROME_EXTENSION,
                    connectType,
                };
            }
            else {
                return undefined;
            }
        }
        catch (_a) {
            return undefined;
        }
    }, [network, post, sign, status, wallets]);
    return value;
}
exports.useConnectedWallet = useConnectedWallet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlQ29ubmVjdGVkV2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL0B0ZXJyYS1kZXYvdXNlLXdhbGxldC91c2VDb25uZWN0ZWRXYWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esb0RBQW9FO0FBQ3BFLGlDQUFnQztBQUVoQyxtQ0FBb0Q7QUFDcEQsMkNBQXdDO0FBZ0J4QyxTQUFnQixrQkFBa0I7SUFDaEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxxQkFBUyxFQUFFLENBQUM7SUFFN0QsTUFBTSxLQUFLLEdBQUcsZUFBTyxDQUE4QixHQUFHLEVBQUU7UUFDdEQsSUFBSTtZQUNGLElBQ0UsTUFBTSxLQUFLLG9CQUFZLENBQUMsZ0JBQWdCO2dCQUN4QyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ2xCLHFCQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFDNUM7Z0JBQ0EsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV6RCxPQUFPO29CQUNMLE9BQU87b0JBQ1AsWUFBWSxFQUFFLFlBQXlCO29CQUN2QyxhQUFhLEVBQUUsWUFBeUI7b0JBQ3hDLE1BQU07b0JBQ04sSUFBSSxFQUFFLENBQUMsRUFBbUIsRUFBRSxFQUFFO3dCQUM1QixPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO29CQUNwQyxDQUFDO29CQUNELElBQUksRUFBRSxDQUFDLEVBQW1CLEVBQUUsRUFBRTt3QkFDNUIsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztvQkFDcEMsQ0FBQztvQkFDRCxhQUFhLEVBQ1gsV0FBVyxLQUFLLG1CQUFXLENBQUMsV0FBVzt3QkFDdkMsV0FBVyxLQUFLLG1CQUFXLENBQUMsZ0JBQWdCO3dCQUM1QyxXQUFXLEtBQUssbUJBQVcsQ0FBQyxhQUFhO29CQUMzQyxhQUFhLEVBQUUsV0FBVyxLQUFLLG1CQUFXLENBQUMsZ0JBQWdCO29CQUMzRCxXQUFXO2lCQUNaLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtTQUNGO1FBQUMsV0FBTTtZQUNOLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFM0MsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBdkNELGdEQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5ldHdvcmtJbmZvLCBTaWduUmVzdWx0IH0gZnJvbSAnQHRlcnJhLWRldi93YWxsZXQtdHlwZXMnO1xuaW1wb3J0IHsgQWNjQWRkcmVzcywgQ3JlYXRlVHhPcHRpb25zIH0gZnJvbSAnQHRlcnJhLW1vbmV5L3RlcnJhLmpzJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUeFJlc3VsdCB9IGZyb20gJy4vdHgnO1xuaW1wb3J0IHsgQ29ubmVjdFR5cGUsIFdhbGxldFN0YXR1cyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgdXNlV2FsbGV0IH0gZnJvbSAnLi91c2VXYWxsZXQnO1xuXG50eXBlIEh1bWFuQWRkciA9IHN0cmluZyAmIHsgX190eXBlOiAnSHVtYW5BZGRyJyB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3RlZFdhbGxldCB7XG4gIG5ldHdvcms6IE5ldHdvcmtJbmZvO1xuICB0ZXJyYUFkZHJlc3M6IEh1bWFuQWRkcjtcbiAgd2FsbGV0QWRkcmVzczogSHVtYW5BZGRyO1xuICBkZXNpZ24/OiBzdHJpbmc7XG4gIHBvc3Q6ICh0eDogQ3JlYXRlVHhPcHRpb25zKSA9PiBQcm9taXNlPFR4UmVzdWx0PjtcbiAgc2lnbjogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IFByb21pc2U8U2lnblJlc3VsdD47XG4gIGF2YWlsYWJsZVBvc3Q6IGJvb2xlYW47XG4gIGF2YWlsYWJsZVNpZ246IGJvb2xlYW47XG4gIGNvbm5lY3RUeXBlOiBDb25uZWN0VHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbm5lY3RlZFdhbGxldCgpOiBDb25uZWN0ZWRXYWxsZXQgfCB1bmRlZmluZWQge1xuICBjb25zdCB7IHN0YXR1cywgbmV0d29yaywgd2FsbGV0cywgcG9zdCwgc2lnbiB9ID0gdXNlV2FsbGV0KCk7XG5cbiAgY29uc3QgdmFsdWUgPSB1c2VNZW1vPENvbm5lY3RlZFdhbGxldCB8IHVuZGVmaW5lZD4oKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoXG4gICAgICAgIHN0YXR1cyA9PT0gV2FsbGV0U3RhdHVzLldBTExFVF9DT05ORUNURUQgJiZcbiAgICAgICAgd2FsbGV0cy5sZW5ndGggPiAwICYmXG4gICAgICAgIEFjY0FkZHJlc3MudmFsaWRhdGUod2FsbGV0c1swXS50ZXJyYUFkZHJlc3MpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgeyB0ZXJyYUFkZHJlc3MsIGNvbm5lY3RUeXBlLCBkZXNpZ24gfSA9IHdhbGxldHNbMF07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXR3b3JrLFxuICAgICAgICAgIHRlcnJhQWRkcmVzczogdGVycmFBZGRyZXNzIGFzIEh1bWFuQWRkcixcbiAgICAgICAgICB3YWxsZXRBZGRyZXNzOiB0ZXJyYUFkZHJlc3MgYXMgSHVtYW5BZGRyLFxuICAgICAgICAgIGRlc2lnbixcbiAgICAgICAgICBwb3N0OiAodHg6IENyZWF0ZVR4T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBvc3QodHgsIHsgdGVycmFBZGRyZXNzIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2lnbjogKHR4OiBDcmVhdGVUeE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzaWduKHR4LCB7IHRlcnJhQWRkcmVzcyB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF2YWlsYWJsZVBvc3Q6XG4gICAgICAgICAgICBjb25uZWN0VHlwZSA9PT0gQ29ubmVjdFR5cGUuV0VCX0NPTk5FQ1QgfHxcbiAgICAgICAgICAgIGNvbm5lY3RUeXBlID09PSBDb25uZWN0VHlwZS5DSFJPTUVfRVhURU5TSU9OIHx8XG4gICAgICAgICAgICBjb25uZWN0VHlwZSA9PT0gQ29ubmVjdFR5cGUuV0FMTEVUQ09OTkVDVCxcbiAgICAgICAgICBhdmFpbGFibGVTaWduOiBjb25uZWN0VHlwZSA9PT0gQ29ubmVjdFR5cGUuQ0hST01FX0VYVEVOU0lPTixcbiAgICAgICAgICBjb25uZWN0VHlwZSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwgW25ldHdvcmssIHBvc3QsIHNpZ24sIHN0YXR1cywgd2FsbGV0c10pO1xuXG4gIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==