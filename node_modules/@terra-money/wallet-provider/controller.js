import { isDesktopChrome } from '@terra-dev/browser-check';
import { readonlyWalletModal } from '@terra-dev/readonly-wallet-modal';
import { ConnectType, WalletStatus, } from '@terra-dev/use-wallet';
import { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, UserDenied, } from '@terra-dev/wallet-types';
import { WebConnectorController } from '@terra-dev/web-connector-controller';
import { WebConnectorCreateTxFailed, WebConnectorStatusType, WebConnectorTxFailed, WebConnectorTxStatus, WebConnectorUserDenied, } from '@terra-dev/web-connector-interface';
import { AccAddress, } from '@terra-money/terra.js';
import deepEqual from 'fast-deep-equal';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { CHROME_EXTENSION_INSTALL_URL, DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK, WEB_EXTENSION_CONNECTED_KEY, } from './env';
import { ChromeExtensionController, ChromeExtensionCreateTxFailed, ChromeExtensionStatus, ChromeExtensionTxFailed, ChromeExtensionUnspecifiedError, } from './modules/chrome-extension';
import { connect as reConnect, connectIfSessionExists as reConnectIfSessionExists, } from './modules/readonly-wallet';
import { connect as wcConnect, connectIfSessionExists as wcConnectIfSessionExists, WalletConnectCreateTxFailed, WalletConnectSessionStatus, WalletConnectTimeout, WalletConnectTxFailed, WalletConnectTxUnspecifiedError, WalletConnectUserDenied, } from './modules/walletconnect';
import { checkAvailableExtension } from './utils/checkAvailableExtension';
const defaultWaitingChromeExtensionInstallCheck = 1000 * 3;
export class WalletController {
    constructor(options) {
        var _a;
        this.options = options;
        this.chromeExtension = null;
        this.webConnector = null;
        this.walletConnect = null;
        this.readonlyWallet = null;
        this.disableReadonlyWallet = null;
        this.disableChromeExtension = null;
        this.disableWebExtension = null;
        this.disableWalletConnect = null;
        /** @see Wallet#isChromeExtensionCompatibleBrowser */
        this.isChromeExtensionCompatibleBrowser = () => {
            var _a;
            return ((_a = this.options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK)(navigator.userAgent);
        };
        /** @see Wallet#availableConnectTypes */
        this.availableConnectTypes = () => {
            return this._availableConnectTypes.asObservable();
        };
        /** @see Wallet#availableInstallTypes */
        this.availableInstallTypes = () => {
            return this._availableInstallTypes.asObservable();
        };
        /**
         * @see Wallet#status
         * @see Wallet#network
         * @see Wallet#wallets
         */
        this.states = () => {
            return this._states.asObservable();
        };
        /** @deprecated please use `states()` */
        this.status = () => {
            return this._states.pipe(map((data) => data.status));
        };
        /** @deprecated please use `states()` */
        this.network = () => {
            return this._states.pipe(map((data) => data.network));
        };
        /** @deprecated please use `states()` */
        this.wallets = () => {
            return this._states.pipe(map((data) => data.status === WalletStatus.WALLET_CONNECTED ? data.wallets : []));
        };
        /** @see Wallet#recheckStatus */
        this.recheckStatus = () => {
            var _a;
            if (this.disableChromeExtension) {
                (_a = this.chromeExtension) === null || _a === void 0 ? void 0 : _a.recheckStatus();
            }
        };
        /** @see Wallet#install */
        this.install = (type) => {
            var _a;
            if (type === ConnectType.CHROME_EXTENSION) {
                window.open(CHROME_EXTENSION_INSTALL_URL, '_blank');
            }
            else if (type === ConnectType.WEB_CONNECT) {
                const webExtensionStatus = (_a = this.webConnector) === null || _a === void 0 ? void 0 : _a.getLastStatus();
                if ((webExtensionStatus === null || webExtensionStatus === void 0 ? void 0 : webExtensionStatus.type) === WebConnectorStatusType.NO_AVAILABLE &&
                    webExtensionStatus.installLink) {
                    window.open(webExtensionStatus.installLink, '_blank');
                }
            }
            else {
                console.warn(`ConnectType "${type}" does not support install() function`);
            }
        };
        /** @see Wallet#connect */
        this.connect = (type) => {
            var _a, _b, _c;
            switch (type) {
                case ConnectType.READONLY:
                    const networks = Object.keys(this.options.walletConnectChainIds).map((chainId) => this.options.walletConnectChainIds[+chainId]);
                    const createReadonlyWalletSession = (_c = (_b = (_a = this.options).createReadonlyWalletSession) === null || _b === void 0 ? void 0 : _b.call(_a, networks)) !== null && _c !== void 0 ? _c : readonlyWalletModal({ networks });
                    createReadonlyWalletSession.then((readonlyWalletSession) => {
                        if (readonlyWalletSession) {
                            this.enableReadonlyWallet(reConnect(readonlyWalletSession));
                        }
                    });
                    break;
                case ConnectType.WALLETCONNECT:
                    this.enableWalletConnect(wcConnect(this.options));
                    break;
                case ConnectType.CHROME_EXTENSION:
                    this.chromeExtension.connect().then((success) => {
                        if (success) {
                            this.enableChromeExtension();
                        }
                    });
                    break;
                case ConnectType.WEB_CONNECT:
                    this.enableWebExtension();
                    break;
                default:
                    throw new Error(`Unknown ConnectType!`);
            }
        };
        /** @see Wallet#connectReadonly */
        this.connectReadonly = (terraAddress, network) => {
            this.enableReadonlyWallet(reConnect({
                terraAddress,
                network,
            }));
        };
        /** @see Wallet#disconnect */
        this.disconnect = () => {
            var _a, _b, _c, _d;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            this.disableReadonlyWallet = null;
            (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            this.disableChromeExtension = null;
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            this.disableWebExtension = null;
            (_d = this.disableWalletConnect) === null || _d === void 0 ? void 0 : _d.call(this);
            this.disableWalletConnect = null;
            localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);
            this.updateStates(this._notConnected);
        };
        /** @see Wallet#post */
        this.post = async (tx, 
        // TODO not work at this time. for the future extension
        txTarget = {}) => {
            // ---------------------------------------------
            // chrome extension - legacy extension
            // ---------------------------------------------
            if (this.disableChromeExtension) {
                if (!this.chromeExtension) {
                    throw new Error(`chromeExtension instance not created!`);
                }
                return (this.chromeExtension
                    // TODO make WalletConnectTxResult to common type
                    .post(tx)
                    .then(({ payload }) => {
                    return {
                        ...tx,
                        result: payload.result,
                        success: true,
                    };
                })
                    .catch((error) => {
                    if (error instanceof ChromeExtensionCreateTxFailed) {
                        throw new CreateTxFailed(tx, error.message);
                    }
                    else if (error instanceof ChromeExtensionTxFailed) {
                        throw new TxFailed(tx, error.txhash, error.message, null);
                    }
                    else if (error instanceof ChromeExtensionUnspecifiedError) {
                        throw new TxUnspecifiedError(tx, error.message);
                    }
                    // UserDeniedError
                    // All unspecified errors...
                    throw error;
                }));
            }
            // ---------------------------------------------
            // web extension - new extension
            // ---------------------------------------------
            else if (this.disableWebExtension) {
                return new Promise((resolve, reject) => {
                    var _a, _b;
                    if (!this.webConnector) {
                        reject(new Error(`webExtension instance not created!`));
                        return;
                    }
                    const webExtensionStates = this.webConnector.getLastStates();
                    if (!webExtensionStates) {
                        reject(new Error(`webExtension.getLastStates() returns undefined!`));
                        return;
                    }
                    const focusedWallet = txTarget.terraAddress
                        ? (_a = webExtensionStates.wallets.find((itemWallet) => itemWallet.terraAddress === txTarget.terraAddress)) !== null && _a !== void 0 ? _a : webExtensionStates.wallets[0]
                        : webExtensionStates.focusedWalletAddress
                            ? (_b = webExtensionStates.wallets.find((itemWallet) => itemWallet.terraAddress ===
                                webExtensionStates.focusedWalletAddress)) !== null && _b !== void 0 ? _b : webExtensionStates.wallets[0]
                            : webExtensionStates.wallets[0];
                    const subscription = this.webConnector
                        .post(focusedWallet.terraAddress, tx)
                        .subscribe({
                        next: (extensionTxResult) => {
                            switch (extensionTxResult.status) {
                                case WebConnectorTxStatus.SUCCEED:
                                    resolve({
                                        ...tx,
                                        result: extensionTxResult.payload,
                                        success: true,
                                    });
                                    subscription.unsubscribe();
                                    break;
                            }
                        },
                        error: (error) => {
                            if (error instanceof WebConnectorUserDenied) {
                                reject(new UserDenied());
                            }
                            else if (error instanceof WebConnectorCreateTxFailed) {
                                reject(new CreateTxFailed(tx, error.message));
                            }
                            else if (error instanceof WebConnectorTxFailed) {
                                reject(new TxFailed(tx, error.txhash, error.message, error.raw_message));
                            }
                            else {
                                reject(new TxUnspecifiedError(tx, 'message' in error ? error.message : String(error)));
                            }
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            // ---------------------------------------------
            // wallet connect
            // ---------------------------------------------
            else if (this.walletConnect) {
                return this.walletConnect
                    .post(tx)
                    .then((result) => ({
                    ...tx,
                    result,
                    success: true,
                }))
                    .catch((error) => {
                    let throwError = error;
                    try {
                        if (error instanceof WalletConnectUserDenied) {
                            throwError = new UserDenied();
                        }
                        else if (error instanceof WalletConnectCreateTxFailed) {
                            throwError = new CreateTxFailed(tx, error.message);
                        }
                        else if (error instanceof WalletConnectTxFailed) {
                            throwError = new TxFailed(tx, error.txhash, error.message, error.raw_message);
                        }
                        else if (error instanceof WalletConnectTimeout) {
                            throwError = new Timeout(error.message);
                        }
                        else if (error instanceof WalletConnectTxUnspecifiedError) {
                            throwError = new TxUnspecifiedError(tx, error.message);
                        }
                    }
                    catch (_a) {
                        throwError = new TxUnspecifiedError(tx, 'message' in error ? error.message : String(error));
                    }
                    throw throwError;
                });
            }
            else {
                throw new Error(`There are no connections that can be posting tx!`);
            }
        };
        /** @see Wallet#sign */
        this.sign = async (tx, 
        // TODO not work at this time. for the future extension
        txTarget = {}) => {
            if (this.disableChromeExtension) {
                if (!this.chromeExtension) {
                    throw new Error(`chromeExtension instance not created!`);
                }
                return this.chromeExtension
                    .sign(tx)
                    .then(({ payload }) => {
                    const publicKey = typeof payload.result.public_key === 'string'
                        ? {
                            type: 'tendermint/PubKeySecp256k1',
                            value: payload.result.public_key,
                        }
                        : payload.result.public_key;
                    const signResult = {
                        ...payload.result,
                        public_key: publicKey,
                    };
                    return {
                        ...tx,
                        result: signResult,
                        success: true,
                    };
                })
                    .catch((error) => {
                    if (error instanceof ChromeExtensionCreateTxFailed) {
                        throw new CreateTxFailed(tx, error.message);
                    }
                    else if (error instanceof ChromeExtensionTxFailed) {
                        throw new TxFailed(tx, error.txhash, error.message, null);
                    }
                    else if (error instanceof ChromeExtensionUnspecifiedError) {
                        throw new TxUnspecifiedError(tx, error.message);
                    }
                    // UserDenied - chrome extension will sent original UserDenied error type
                    // All unspecified errors...
                    throw error;
                });
            }
            throw new Error(`sign() method only available on chrome extension`);
            // TODO implements sign() to other connect types
        };
        // ================================================================
        // internal
        // connect type changing
        // ================================================================
        this.updateStates = (next) => {
            const prev = this._states.getValue();
            if (next.status === WalletStatus.WALLET_CONNECTED &&
                next.wallets.length === 0) {
                console.trace('???');
            }
            if (prev.status !== next.status || !deepEqual(prev, next)) {
                this._states.next(next);
            }
        };
        this.enableReadonlyWallet = (readonlyWallet) => {
            var _a, _b, _c, _d;
            (_a = this.disableWalletConnect) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.readonlyWallet === readonlyWallet ||
                (((_d = this.readonlyWallet) === null || _d === void 0 ? void 0 : _d.terraAddress) === readonlyWallet.terraAddress &&
                    this.readonlyWallet.network === readonlyWallet.network)) {
                return;
            }
            if (this.readonlyWallet) {
                this.readonlyWallet.disconnect();
            }
            this.readonlyWallet = readonlyWallet;
            this.updateStates({
                status: WalletStatus.WALLET_CONNECTED,
                network: readonlyWallet.network,
                wallets: [
                    {
                        connectType: ConnectType.READONLY,
                        terraAddress: readonlyWallet.terraAddress,
                        design: 'readonly',
                    },
                ],
            });
            this.disableReadonlyWallet = () => {
                readonlyWallet.disconnect();
                this.readonlyWallet = null;
                this.disableReadonlyWallet = null;
            };
        };
        this.enableWebExtension = () => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableChromeExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.disableWebExtension || !this.webConnector) {
                return;
            }
            const extensionSubscription = combineLatest([
                this.webConnector.status(),
                this.webConnector.states(),
            ]).subscribe(([status, states]) => {
                var _a;
                if (!states) {
                    return;
                }
                if (status.type === WebConnectorStatusType.READY) {
                    if (states.wallets.length > 0) {
                        const focusedWallet = states.focusedWalletAddress
                            ? (_a = states.wallets.find((itemWallet) => itemWallet.terraAddress === states.focusedWalletAddress)) !== null && _a !== void 0 ? _a : states.wallets[0]
                            : states.wallets[0];
                        this.updateStates({
                            status: WalletStatus.WALLET_CONNECTED,
                            network: states.network,
                            wallets: [
                                {
                                    connectType: ConnectType.WEB_CONNECT,
                                    terraAddress: focusedWallet.terraAddress,
                                    design: focusedWallet.design,
                                },
                            ],
                        });
                    }
                }
                else if (status.type === WebConnectorStatusType.NO_AVAILABLE) {
                    localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);
                    this.updateStates(this._notConnected);
                    if (!status.isApproved && this.disableWebExtension) {
                        this.disableWebExtension();
                    }
                }
            });
            localStorage.setItem(WEB_EXTENSION_CONNECTED_KEY, 'true');
            const lastExtensionStatus = this.webConnector.getLastStatus();
            if (lastExtensionStatus.type === WebConnectorStatusType.NO_AVAILABLE &&
                lastExtensionStatus.isApproved === false) {
                this.webConnector.requestApproval();
            }
            this.disableWebExtension = () => {
                localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);
                extensionSubscription.unsubscribe();
                this.disableWebExtension = null;
            };
        };
        this.enableChromeExtension = () => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.disableChromeExtension || !this.chromeExtension) {
                return;
            }
            const extensionSubscription = combineLatest([
                this.chromeExtension.status(),
                this.chromeExtension.networkInfo(),
                this.chromeExtension.terraAddress(),
            ]).subscribe({
                next: ([status, networkInfo, terraAddress]) => {
                    if (status === ChromeExtensionStatus.WALLET_CONNECTED &&
                        typeof terraAddress === 'string' &&
                        AccAddress.validate(terraAddress)) {
                        this.updateStates({
                            status: WalletStatus.WALLET_CONNECTED,
                            network: networkInfo,
                            wallets: [
                                {
                                    connectType: ConnectType.CHROME_EXTENSION,
                                    terraAddress,
                                    design: 'extension',
                                },
                            ],
                        });
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                },
            });
            this.disableChromeExtension = () => {
                var _a;
                (_a = this.chromeExtension) === null || _a === void 0 ? void 0 : _a.disconnect();
                extensionSubscription.unsubscribe();
                this.disableChromeExtension = null;
            };
        };
        this.enableWalletConnect = (walletConnect) => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.walletConnect === walletConnect) {
                return;
            }
            if (this.walletConnect) {
                this.walletConnect.disconnect();
            }
            this.walletConnect = walletConnect;
            const subscribeWalletConnect = (wc) => {
                return wc.session().subscribe({
                    next: (status) => {
                        var _a;
                        switch (status.status) {
                            case WalletConnectSessionStatus.CONNECTED:
                                this.updateStates({
                                    status: WalletStatus.WALLET_CONNECTED,
                                    network: (_a = this.options.walletConnectChainIds[status.chainId]) !== null && _a !== void 0 ? _a : this.options.defaultNetwork,
                                    wallets: [
                                        {
                                            connectType: ConnectType.WALLETCONNECT,
                                            terraAddress: status.terraAddress,
                                            design: 'walletconnect',
                                        },
                                    ],
                                });
                                break;
                            default:
                                this.updateStates(this._notConnected);
                                break;
                        }
                    },
                });
            };
            const walletConnectSessionSubscription = subscribeWalletConnect(walletConnect);
            this.disableWalletConnect = () => {
                var _a;
                (_a = this.walletConnect) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.walletConnect = null;
                walletConnectSessionSubscription.unsubscribe();
                this.disableWalletConnect = null;
            };
        };
        this._notConnected = {
            status: WalletStatus.WALLET_NOT_CONNECTED,
            network: options.defaultNetwork,
        };
        this._initializing = {
            status: WalletStatus.INITIALIZING,
            network: options.defaultNetwork,
        };
        this._availableConnectTypes = new BehaviorSubject([
            ConnectType.READONLY,
            ConnectType.WALLETCONNECT,
        ]);
        this._availableInstallTypes = new BehaviorSubject([]);
        this._states = new BehaviorSubject(this._initializing);
        let numSessionCheck = 0;
        // wait checking the availability of the chrome extension
        // 0. check if extension wallet session is exists
        checkAvailableExtension((_a = options.waitingChromeExtensionInstallCheck) !== null && _a !== void 0 ? _a : defaultWaitingChromeExtensionInstallCheck, this.isChromeExtensionCompatibleBrowser()).then((extensionType) => {
            var _a;
            if (extensionType === ConnectType.WEB_CONNECT) {
                this._availableConnectTypes.next([
                    ConnectType.READONLY,
                    ConnectType.WEB_CONNECT,
                    ConnectType.WALLETCONNECT,
                ]);
                this.webConnector = new WebConnectorController(window);
                const subscription = this.webConnector
                    .status()
                    .pipe(filter((webExtensionStatus) => {
                    return (webExtensionStatus.type !== WebConnectorStatusType.INITIALIZING);
                }))
                    .subscribe((webExtensionStatus) => {
                    subscription.unsubscribe();
                    if (webExtensionStatus.type === WebConnectorStatusType.READY &&
                        localStorage.getItem(WEB_EXTENSION_CONNECTED_KEY) === 'true' &&
                        !this.disableWalletConnect &&
                        !this.disableReadonlyWallet) {
                        this.enableWebExtension();
                    }
                    else if (numSessionCheck === 0) {
                        numSessionCheck += 1;
                    }
                    else {
                        this.updateStates(this._notConnected);
                        localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);
                    }
                });
            }
            else if (extensionType === ConnectType.CHROME_EXTENSION) {
                this._availableConnectTypes.next([
                    ConnectType.READONLY,
                    ConnectType.CHROME_EXTENSION,
                    ConnectType.WALLETCONNECT,
                ]);
                this.chromeExtension = new ChromeExtensionController({
                    enableWalletConnection: true,
                    defaultNetwork: options.defaultNetwork,
                    dangerously__chromeExtensionCompatibleBrowserCheck: (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK,
                });
                const subscription = this.chromeExtension
                    .status()
                    .pipe(filter((chromeExtensionStatus) => {
                    return (chromeExtensionStatus !== ChromeExtensionStatus.INITIALIZING);
                }))
                    .subscribe((chromeExtensionStatus) => {
                    try {
                        subscription.unsubscribe();
                    }
                    catch (_a) { }
                    if (chromeExtensionStatus ===
                        ChromeExtensionStatus.WALLET_CONNECTED &&
                        !this.disableWalletConnect &&
                        !this.disableReadonlyWallet) {
                        this.enableChromeExtension();
                    }
                    else if (numSessionCheck === 0) {
                        numSessionCheck += 1;
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                });
            }
            else {
                if (isDesktopChrome(this.isChromeExtensionCompatibleBrowser())) {
                    this._availableInstallTypes.next([ConnectType.CHROME_EXTENSION]);
                }
                if (numSessionCheck === 0) {
                    numSessionCheck += 1;
                }
                else {
                    this.updateStates(this._notConnected);
                }
            }
        });
        // 1. check if readonly wallet session is exists
        const draftReadonlyWallet = reConnectIfSessionExists();
        if (draftReadonlyWallet) {
            this.enableReadonlyWallet(draftReadonlyWallet);
            return;
        }
        // 2. check if walletconnect sesison is exists
        const draftWalletConnect = wcConnectIfSessionExists(options);
        if (draftWalletConnect &&
            draftWalletConnect.getLatestSession().status ===
                WalletConnectSessionStatus.CONNECTED) {
            this.enableWalletConnect(draftWalletConnect);
        }
        else if (numSessionCheck === 0) {
            numSessionCheck += 1;
        }
        else {
            this.updateStates(this._notConnected);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,