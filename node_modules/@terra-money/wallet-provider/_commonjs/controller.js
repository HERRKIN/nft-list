"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletController = void 0;
const browser_check_1 = require("@terra-dev/browser-check");
const readonly_wallet_modal_1 = require("@terra-dev/readonly-wallet-modal");
const use_wallet_1 = require("@terra-dev/use-wallet");
const wallet_types_1 = require("@terra-dev/wallet-types");
const web_connector_controller_1 = require("@terra-dev/web-connector-controller");
const web_connector_interface_1 = require("@terra-dev/web-connector-interface");
const terra_js_1 = require("@terra-money/terra.js");
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const env_1 = require("./env");
const chrome_extension_1 = require("./modules/chrome-extension");
const readonly_wallet_1 = require("./modules/readonly-wallet");
const walletconnect_1 = require("./modules/walletconnect");
const checkAvailableExtension_1 = require("./utils/checkAvailableExtension");
const defaultWaitingChromeExtensionInstallCheck = 1000 * 3;
class WalletController {
    constructor(options) {
        var _a;
        this.options = options;
        this.chromeExtension = null;
        this.webConnector = null;
        this.walletConnect = null;
        this.readonlyWallet = null;
        this.disableReadonlyWallet = null;
        this.disableChromeExtension = null;
        this.disableWebExtension = null;
        this.disableWalletConnect = null;
        /** @see Wallet#isChromeExtensionCompatibleBrowser */
        this.isChromeExtensionCompatibleBrowser = () => {
            var _a;
            return ((_a = this.options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : env_1.DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK)(navigator.userAgent);
        };
        /** @see Wallet#availableConnectTypes */
        this.availableConnectTypes = () => {
            return this._availableConnectTypes.asObservable();
        };
        /** @see Wallet#availableInstallTypes */
        this.availableInstallTypes = () => {
            return this._availableInstallTypes.asObservable();
        };
        /**
         * @see Wallet#status
         * @see Wallet#network
         * @see Wallet#wallets
         */
        this.states = () => {
            return this._states.asObservable();
        };
        /** @deprecated please use `states()` */
        this.status = () => {
            return this._states.pipe(operators_1.map((data) => data.status));
        };
        /** @deprecated please use `states()` */
        this.network = () => {
            return this._states.pipe(operators_1.map((data) => data.network));
        };
        /** @deprecated please use `states()` */
        this.wallets = () => {
            return this._states.pipe(operators_1.map((data) => data.status === use_wallet_1.WalletStatus.WALLET_CONNECTED ? data.wallets : []));
        };
        /** @see Wallet#recheckStatus */
        this.recheckStatus = () => {
            var _a;
            if (this.disableChromeExtension) {
                (_a = this.chromeExtension) === null || _a === void 0 ? void 0 : _a.recheckStatus();
            }
        };
        /** @see Wallet#install */
        this.install = (type) => {
            var _a;
            if (type === use_wallet_1.ConnectType.CHROME_EXTENSION) {
                window.open(env_1.CHROME_EXTENSION_INSTALL_URL, '_blank');
            }
            else if (type === use_wallet_1.ConnectType.WEB_CONNECT) {
                const webExtensionStatus = (_a = this.webConnector) === null || _a === void 0 ? void 0 : _a.getLastStatus();
                if ((webExtensionStatus === null || webExtensionStatus === void 0 ? void 0 : webExtensionStatus.type) === web_connector_interface_1.WebConnectorStatusType.NO_AVAILABLE &&
                    webExtensionStatus.installLink) {
                    window.open(webExtensionStatus.installLink, '_blank');
                }
            }
            else {
                console.warn(`ConnectType "${type}" does not support install() function`);
            }
        };
        /** @see Wallet#connect */
        this.connect = (type) => {
            var _a, _b, _c;
            switch (type) {
                case use_wallet_1.ConnectType.READONLY:
                    const networks = Object.keys(this.options.walletConnectChainIds).map((chainId) => this.options.walletConnectChainIds[+chainId]);
                    const createReadonlyWalletSession = (_c = (_b = (_a = this.options).createReadonlyWalletSession) === null || _b === void 0 ? void 0 : _b.call(_a, networks)) !== null && _c !== void 0 ? _c : readonly_wallet_modal_1.readonlyWalletModal({ networks });
                    createReadonlyWalletSession.then((readonlyWalletSession) => {
                        if (readonlyWalletSession) {
                            this.enableReadonlyWallet(readonly_wallet_1.connect(readonlyWalletSession));
                        }
                    });
                    break;
                case use_wallet_1.ConnectType.WALLETCONNECT:
                    this.enableWalletConnect(walletconnect_1.connect(this.options));
                    break;
                case use_wallet_1.ConnectType.CHROME_EXTENSION:
                    this.chromeExtension.connect().then((success) => {
                        if (success) {
                            this.enableChromeExtension();
                        }
                    });
                    break;
                case use_wallet_1.ConnectType.WEB_CONNECT:
                    this.enableWebExtension();
                    break;
                default:
                    throw new Error(`Unknown ConnectType!`);
            }
        };
        /** @see Wallet#connectReadonly */
        this.connectReadonly = (terraAddress, network) => {
            this.enableReadonlyWallet(readonly_wallet_1.connect({
                terraAddress,
                network,
            }));
        };
        /** @see Wallet#disconnect */
        this.disconnect = () => {
            var _a, _b, _c, _d;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            this.disableReadonlyWallet = null;
            (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            this.disableChromeExtension = null;
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            this.disableWebExtension = null;
            (_d = this.disableWalletConnect) === null || _d === void 0 ? void 0 : _d.call(this);
            this.disableWalletConnect = null;
            localStorage.removeItem(env_1.WEB_EXTENSION_CONNECTED_KEY);
            this.updateStates(this._notConnected);
        };
        /** @see Wallet#post */
        this.post = async (tx, 
        // TODO not work at this time. for the future extension
        txTarget = {}) => {
            // ---------------------------------------------
            // chrome extension - legacy extension
            // ---------------------------------------------
            if (this.disableChromeExtension) {
                if (!this.chromeExtension) {
                    throw new Error(`chromeExtension instance not created!`);
                }
                return (this.chromeExtension
                    // TODO make WalletConnectTxResult to common type
                    .post(tx)
                    .then(({ payload }) => {
                    return {
                        ...tx,
                        result: payload.result,
                        success: true,
                    };
                })
                    .catch((error) => {
                    if (error instanceof chrome_extension_1.ChromeExtensionCreateTxFailed) {
                        throw new wallet_types_1.CreateTxFailed(tx, error.message);
                    }
                    else if (error instanceof chrome_extension_1.ChromeExtensionTxFailed) {
                        throw new wallet_types_1.TxFailed(tx, error.txhash, error.message, null);
                    }
                    else if (error instanceof chrome_extension_1.ChromeExtensionUnspecifiedError) {
                        throw new wallet_types_1.TxUnspecifiedError(tx, error.message);
                    }
                    // UserDeniedError
                    // All unspecified errors...
                    throw error;
                }));
            }
            // ---------------------------------------------
            // web extension - new extension
            // ---------------------------------------------
            else if (this.disableWebExtension) {
                return new Promise((resolve, reject) => {
                    var _a, _b;
                    if (!this.webConnector) {
                        reject(new Error(`webExtension instance not created!`));
                        return;
                    }
                    const webExtensionStates = this.webConnector.getLastStates();
                    if (!webExtensionStates) {
                        reject(new Error(`webExtension.getLastStates() returns undefined!`));
                        return;
                    }
                    const focusedWallet = txTarget.terraAddress
                        ? (_a = webExtensionStates.wallets.find((itemWallet) => itemWallet.terraAddress === txTarget.terraAddress)) !== null && _a !== void 0 ? _a : webExtensionStates.wallets[0]
                        : webExtensionStates.focusedWalletAddress
                            ? (_b = webExtensionStates.wallets.find((itemWallet) => itemWallet.terraAddress ===
                                webExtensionStates.focusedWalletAddress)) !== null && _b !== void 0 ? _b : webExtensionStates.wallets[0]
                            : webExtensionStates.wallets[0];
                    const subscription = this.webConnector
                        .post(focusedWallet.terraAddress, tx)
                        .subscribe({
                        next: (extensionTxResult) => {
                            switch (extensionTxResult.status) {
                                case web_connector_interface_1.WebConnectorTxStatus.SUCCEED:
                                    resolve({
                                        ...tx,
                                        result: extensionTxResult.payload,
                                        success: true,
                                    });
                                    subscription.unsubscribe();
                                    break;
                            }
                        },
                        error: (error) => {
                            if (error instanceof web_connector_interface_1.WebConnectorUserDenied) {
                                reject(new wallet_types_1.UserDenied());
                            }
                            else if (error instanceof web_connector_interface_1.WebConnectorCreateTxFailed) {
                                reject(new wallet_types_1.CreateTxFailed(tx, error.message));
                            }
                            else if (error instanceof web_connector_interface_1.WebConnectorTxFailed) {
                                reject(new wallet_types_1.TxFailed(tx, error.txhash, error.message, error.raw_message));
                            }
                            else {
                                reject(new wallet_types_1.TxUnspecifiedError(tx, 'message' in error ? error.message : String(error)));
                            }
                            subscription.unsubscribe();
                        },
                    });
                });
            }
            // ---------------------------------------------
            // wallet connect
            // ---------------------------------------------
            else if (this.walletConnect) {
                return this.walletConnect
                    .post(tx)
                    .then((result) => ({
                    ...tx,
                    result,
                    success: true,
                }))
                    .catch((error) => {
                    let throwError = error;
                    try {
                        if (error instanceof walletconnect_1.WalletConnectUserDenied) {
                            throwError = new wallet_types_1.UserDenied();
                        }
                        else if (error instanceof walletconnect_1.WalletConnectCreateTxFailed) {
                            throwError = new wallet_types_1.CreateTxFailed(tx, error.message);
                        }
                        else if (error instanceof walletconnect_1.WalletConnectTxFailed) {
                            throwError = new wallet_types_1.TxFailed(tx, error.txhash, error.message, error.raw_message);
                        }
                        else if (error instanceof walletconnect_1.WalletConnectTimeout) {
                            throwError = new wallet_types_1.Timeout(error.message);
                        }
                        else if (error instanceof walletconnect_1.WalletConnectTxUnspecifiedError) {
                            throwError = new wallet_types_1.TxUnspecifiedError(tx, error.message);
                        }
                    }
                    catch (_a) {
                        throwError = new wallet_types_1.TxUnspecifiedError(tx, 'message' in error ? error.message : String(error));
                    }
                    throw throwError;
                });
            }
            else {
                throw new Error(`There are no connections that can be posting tx!`);
            }
        };
        /** @see Wallet#sign */
        this.sign = async (tx, 
        // TODO not work at this time. for the future extension
        txTarget = {}) => {
            if (this.disableChromeExtension) {
                if (!this.chromeExtension) {
                    throw new Error(`chromeExtension instance not created!`);
                }
                return this.chromeExtension
                    .sign(tx)
                    .then(({ payload }) => {
                    const publicKey = typeof payload.result.public_key === 'string'
                        ? {
                            type: 'tendermint/PubKeySecp256k1',
                            value: payload.result.public_key,
                        }
                        : payload.result.public_key;
                    const signResult = {
                        ...payload.result,
                        public_key: publicKey,
                    };
                    return {
                        ...tx,
                        result: signResult,
                        success: true,
                    };
                })
                    .catch((error) => {
                    if (error instanceof chrome_extension_1.ChromeExtensionCreateTxFailed) {
                        throw new wallet_types_1.CreateTxFailed(tx, error.message);
                    }
                    else if (error instanceof chrome_extension_1.ChromeExtensionTxFailed) {
                        throw new wallet_types_1.TxFailed(tx, error.txhash, error.message, null);
                    }
                    else if (error instanceof chrome_extension_1.ChromeExtensionUnspecifiedError) {
                        throw new wallet_types_1.TxUnspecifiedError(tx, error.message);
                    }
                    // UserDenied - chrome extension will sent original UserDenied error type
                    // All unspecified errors...
                    throw error;
                });
            }
            throw new Error(`sign() method only available on chrome extension`);
            // TODO implements sign() to other connect types
        };
        // ================================================================
        // internal
        // connect type changing
        // ================================================================
        this.updateStates = (next) => {
            const prev = this._states.getValue();
            if (next.status === use_wallet_1.WalletStatus.WALLET_CONNECTED &&
                next.wallets.length === 0) {
                console.trace('???');
            }
            if (prev.status !== next.status || !fast_deep_equal_1.default(prev, next)) {
                this._states.next(next);
            }
        };
        this.enableReadonlyWallet = (readonlyWallet) => {
            var _a, _b, _c, _d;
            (_a = this.disableWalletConnect) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.readonlyWallet === readonlyWallet ||
                (((_d = this.readonlyWallet) === null || _d === void 0 ? void 0 : _d.terraAddress) === readonlyWallet.terraAddress &&
                    this.readonlyWallet.network === readonlyWallet.network)) {
                return;
            }
            if (this.readonlyWallet) {
                this.readonlyWallet.disconnect();
            }
            this.readonlyWallet = readonlyWallet;
            this.updateStates({
                status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                network: readonlyWallet.network,
                wallets: [
                    {
                        connectType: use_wallet_1.ConnectType.READONLY,
                        terraAddress: readonlyWallet.terraAddress,
                        design: 'readonly',
                    },
                ],
            });
            this.disableReadonlyWallet = () => {
                readonlyWallet.disconnect();
                this.readonlyWallet = null;
                this.disableReadonlyWallet = null;
            };
        };
        this.enableWebExtension = () => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableChromeExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.disableWebExtension || !this.webConnector) {
                return;
            }
            const extensionSubscription = rxjs_1.combineLatest([
                this.webConnector.status(),
                this.webConnector.states(),
            ]).subscribe(([status, states]) => {
                var _a;
                if (!states) {
                    return;
                }
                if (status.type === web_connector_interface_1.WebConnectorStatusType.READY) {
                    if (states.wallets.length > 0) {
                        const focusedWallet = states.focusedWalletAddress
                            ? (_a = states.wallets.find((itemWallet) => itemWallet.terraAddress === states.focusedWalletAddress)) !== null && _a !== void 0 ? _a : states.wallets[0]
                            : states.wallets[0];
                        this.updateStates({
                            status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                            network: states.network,
                            wallets: [
                                {
                                    connectType: use_wallet_1.ConnectType.WEB_CONNECT,
                                    terraAddress: focusedWallet.terraAddress,
                                    design: focusedWallet.design,
                                },
                            ],
                        });
                    }
                }
                else if (status.type === web_connector_interface_1.WebConnectorStatusType.NO_AVAILABLE) {
                    localStorage.removeItem(env_1.WEB_EXTENSION_CONNECTED_KEY);
                    this.updateStates(this._notConnected);
                    if (!status.isApproved && this.disableWebExtension) {
                        this.disableWebExtension();
                    }
                }
            });
            localStorage.setItem(env_1.WEB_EXTENSION_CONNECTED_KEY, 'true');
            const lastExtensionStatus = this.webConnector.getLastStatus();
            if (lastExtensionStatus.type === web_connector_interface_1.WebConnectorStatusType.NO_AVAILABLE &&
                lastExtensionStatus.isApproved === false) {
                this.webConnector.requestApproval();
            }
            this.disableWebExtension = () => {
                localStorage.removeItem(env_1.WEB_EXTENSION_CONNECTED_KEY);
                extensionSubscription.unsubscribe();
                this.disableWebExtension = null;
            };
        };
        this.enableChromeExtension = () => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.disableChromeExtension || !this.chromeExtension) {
                return;
            }
            const extensionSubscription = rxjs_1.combineLatest([
                this.chromeExtension.status(),
                this.chromeExtension.networkInfo(),
                this.chromeExtension.terraAddress(),
            ]).subscribe({
                next: ([status, networkInfo, terraAddress]) => {
                    if (status === chrome_extension_1.ChromeExtensionStatus.WALLET_CONNECTED &&
                        typeof terraAddress === 'string' &&
                        terra_js_1.AccAddress.validate(terraAddress)) {
                        this.updateStates({
                            status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                            network: networkInfo,
                            wallets: [
                                {
                                    connectType: use_wallet_1.ConnectType.CHROME_EXTENSION,
                                    terraAddress,
                                    design: 'extension',
                                },
                            ],
                        });
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                },
            });
            this.disableChromeExtension = () => {
                var _a;
                (_a = this.chromeExtension) === null || _a === void 0 ? void 0 : _a.disconnect();
                extensionSubscription.unsubscribe();
                this.disableChromeExtension = null;
            };
        };
        this.enableWalletConnect = (walletConnect) => {
            var _a, _b, _c;
            (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);
            (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);
            (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);
            if (this.walletConnect === walletConnect) {
                return;
            }
            if (this.walletConnect) {
                this.walletConnect.disconnect();
            }
            this.walletConnect = walletConnect;
            const subscribeWalletConnect = (wc) => {
                return wc.session().subscribe({
                    next: (status) => {
                        var _a;
                        switch (status.status) {
                            case walletconnect_1.WalletConnectSessionStatus.CONNECTED:
                                this.updateStates({
                                    status: use_wallet_1.WalletStatus.WALLET_CONNECTED,
                                    network: (_a = this.options.walletConnectChainIds[status.chainId]) !== null && _a !== void 0 ? _a : this.options.defaultNetwork,
                                    wallets: [
                                        {
                                            connectType: use_wallet_1.ConnectType.WALLETCONNECT,
                                            terraAddress: status.terraAddress,
                                            design: 'walletconnect',
                                        },
                                    ],
                                });
                                break;
                            default:
                                this.updateStates(this._notConnected);
                                break;
                        }
                    },
                });
            };
            const walletConnectSessionSubscription = subscribeWalletConnect(walletConnect);
            this.disableWalletConnect = () => {
                var _a;
                (_a = this.walletConnect) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.walletConnect = null;
                walletConnectSessionSubscription.unsubscribe();
                this.disableWalletConnect = null;
            };
        };
        this._notConnected = {
            status: use_wallet_1.WalletStatus.WALLET_NOT_CONNECTED,
            network: options.defaultNetwork,
        };
        this._initializing = {
            status: use_wallet_1.WalletStatus.INITIALIZING,
            network: options.defaultNetwork,
        };
        this._availableConnectTypes = new rxjs_1.BehaviorSubject([
            use_wallet_1.ConnectType.READONLY,
            use_wallet_1.ConnectType.WALLETCONNECT,
        ]);
        this._availableInstallTypes = new rxjs_1.BehaviorSubject([]);
        this._states = new rxjs_1.BehaviorSubject(this._initializing);
        let numSessionCheck = 0;
        // wait checking the availability of the chrome extension
        // 0. check if extension wallet session is exists
        checkAvailableExtension_1.checkAvailableExtension((_a = options.waitingChromeExtensionInstallCheck) !== null && _a !== void 0 ? _a : defaultWaitingChromeExtensionInstallCheck, this.isChromeExtensionCompatibleBrowser()).then((extensionType) => {
            var _a;
            if (extensionType === use_wallet_1.ConnectType.WEB_CONNECT) {
                this._availableConnectTypes.next([
                    use_wallet_1.ConnectType.READONLY,
                    use_wallet_1.ConnectType.WEB_CONNECT,
                    use_wallet_1.ConnectType.WALLETCONNECT,
                ]);
                this.webConnector = new web_connector_controller_1.WebConnectorController(window);
                const subscription = this.webConnector
                    .status()
                    .pipe(operators_1.filter((webExtensionStatus) => {
                    return (webExtensionStatus.type !== web_connector_interface_1.WebConnectorStatusType.INITIALIZING);
                }))
                    .subscribe((webExtensionStatus) => {
                    subscription.unsubscribe();
                    if (webExtensionStatus.type === web_connector_interface_1.WebConnectorStatusType.READY &&
                        localStorage.getItem(env_1.WEB_EXTENSION_CONNECTED_KEY) === 'true' &&
                        !this.disableWalletConnect &&
                        !this.disableReadonlyWallet) {
                        this.enableWebExtension();
                    }
                    else if (numSessionCheck === 0) {
                        numSessionCheck += 1;
                    }
                    else {
                        this.updateStates(this._notConnected);
                        localStorage.removeItem(env_1.WEB_EXTENSION_CONNECTED_KEY);
                    }
                });
            }
            else if (extensionType === use_wallet_1.ConnectType.CHROME_EXTENSION) {
                this._availableConnectTypes.next([
                    use_wallet_1.ConnectType.READONLY,
                    use_wallet_1.ConnectType.CHROME_EXTENSION,
                    use_wallet_1.ConnectType.WALLETCONNECT,
                ]);
                this.chromeExtension = new chrome_extension_1.ChromeExtensionController({
                    enableWalletConnection: true,
                    defaultNetwork: options.defaultNetwork,
                    dangerously__chromeExtensionCompatibleBrowserCheck: (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : env_1.DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK,
                });
                const subscription = this.chromeExtension
                    .status()
                    .pipe(operators_1.filter((chromeExtensionStatus) => {
                    return (chromeExtensionStatus !== chrome_extension_1.ChromeExtensionStatus.INITIALIZING);
                }))
                    .subscribe((chromeExtensionStatus) => {
                    try {
                        subscription.unsubscribe();
                    }
                    catch (_a) { }
                    if (chromeExtensionStatus ===
                        chrome_extension_1.ChromeExtensionStatus.WALLET_CONNECTED &&
                        !this.disableWalletConnect &&
                        !this.disableReadonlyWallet) {
                        this.enableChromeExtension();
                    }
                    else if (numSessionCheck === 0) {
                        numSessionCheck += 1;
                    }
                    else {
                        this.updateStates(this._notConnected);
                    }
                });
            }
            else {
                if (browser_check_1.isDesktopChrome(this.isChromeExtensionCompatibleBrowser())) {
                    this._availableInstallTypes.next([use_wallet_1.ConnectType.CHROME_EXTENSION]);
                }
                if (numSessionCheck === 0) {
                    numSessionCheck += 1;
                }
                else {
                    this.updateStates(this._notConnected);
                }
            }
        });
        // 1. check if readonly wallet session is exists
        const draftReadonlyWallet = readonly_wallet_1.connectIfSessionExists();
        if (draftReadonlyWallet) {
            this.enableReadonlyWallet(draftReadonlyWallet);
            return;
        }
        // 2. check if walletconnect sesison is exists
        const draftWalletConnect = walletconnect_1.connectIfSessionExists(options);
        if (draftWalletConnect &&
            draftWalletConnect.getLatestSession().status ===
                walletconnect_1.WalletConnectSessionStatus.CONNECTED) {
            this.enableWalletConnect(draftWalletConnect);
        }
        else if (numSessionCheck === 0) {
            numSessionCheck += 1;
        }
        else {
            this.updateStates(this._notConnected);
        }
    }
}
exports.WalletController = WalletController;
//# sourceMappingURL=data:application/json;base64,