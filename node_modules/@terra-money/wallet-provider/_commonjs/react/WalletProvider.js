"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_wallet_1 = require("@terra-dev/use-wallet");
const react_1 = require("react");
const controller_1 = require("../controller");
const EMPTY_ARRAY = [];
function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, }) {
    const [controller] = react_1.useState(() => new controller_1.WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = react_1.useState(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = react_1.useState(() => []);
    const [states, setStates] = react_1.useState(() => ({
        status: use_wallet_1.WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    react_1.useEffect(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = react_1.useMemo(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            status: states.status,
            network: states.network,
            wallets: states.status === use_wallet_1.WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            post: controller.post,
            sign: controller.sign,
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        controller.connect,
        controller.connectReadonly,
        controller.disconnect,
        controller.install,
        controller.post,
        controller.sign,
        controller.recheckStatus,
        controller.isChromeExtensionCompatibleBrowser,
        states,
    ]);
    return (jsx_runtime_1.jsx(use_wallet_1.WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
exports.WalletProvider = WalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGV0UHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dhbGxldC1wcm92aWRlci9yZWFjdC9XYWxsZXRQcm92aWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNEQU8rQjtBQUMvQixpQ0FBdUU7QUFDdkUsOENBQTBFO0FBTTFFLE1BQU0sV0FBVyxHQUFpQixFQUFFLENBQUM7QUFFckMsU0FBZ0IsY0FBYyxDQUFDLEVBQzdCLFFBQVEsRUFDUixjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYixjQUFjLEVBQ2QsMkJBQTJCLEVBQzNCLGtDQUFrQyxFQUNsQyxrREFBa0QsR0FDOUI7SUFDcEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLGdCQUFRLENBQzNCLEdBQUcsRUFBRSxDQUNILElBQUksNkJBQWdCLENBQUM7UUFDbkIsY0FBYztRQUNkLHFCQUFxQjtRQUNyQixhQUFhO1FBQ2IsY0FBYztRQUNkLDJCQUEyQjtRQUMzQixrQ0FBa0M7UUFDbEMsa0RBQWtEO0tBQ25ELENBQUMsQ0FDTCxDQUFDO0lBRUYsTUFBTSxDQUFDLHFCQUFxQixFQUFFLHdCQUF3QixDQUFDLEdBQUcsZ0JBQVEsQ0FFaEUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFWixNQUFNLENBQUMscUJBQXFCLEVBQUUsd0JBQXdCLENBQUMsR0FBRyxnQkFBUSxDQUVoRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVaLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsZ0JBQVEsQ0FBZSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sRUFBRSx5QkFBWSxDQUFDLFlBQVk7UUFDakMsT0FBTyxFQUFFLGNBQWM7S0FDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSixpQkFBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0saUNBQWlDLEdBQUcsVUFBVTthQUNqRCxxQkFBcUIsRUFBRTthQUN2QixTQUFTLENBQUM7WUFDVCxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDZCx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBRUwsTUFBTSxpQ0FBaUMsR0FBRyxVQUFVO2FBQ2pELHFCQUFxQixFQUFFO2FBQ3ZCLFNBQVMsQ0FBQztZQUNULElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNkLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLENBQUM7U0FDRixDQUFDLENBQUM7UUFFTCxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDdkQsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2QsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsRUFBRTtZQUNWLGlDQUFpQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hELGlDQUFpQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hELGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFFakIsTUFBTSxLQUFLLEdBQUcsZUFBTyxDQUFTLEdBQUcsRUFBRTtRQUNqQyxPQUFPO1lBQ0wscUJBQXFCO1lBQ3JCLHFCQUFxQjtZQUNyQixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDckIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3ZCLE9BQU8sRUFDTCxNQUFNLENBQUMsTUFBTSxLQUFLLHlCQUFZLENBQUMsZ0JBQWdCO2dCQUM3QyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ2hCLENBQUMsQ0FBQyxXQUFXO1lBQ2pCLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTztZQUMzQixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87WUFDM0IsZUFBZSxFQUFFLFVBQVUsQ0FBQyxlQUFlO1lBQzNDLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTtZQUNqQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7WUFDckIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO1lBQ3JCLGFBQWEsRUFBRSxVQUFVLENBQUMsYUFBYTtZQUN2QyxrQ0FBa0MsRUFDaEMsVUFBVSxDQUFDLGtDQUFrQztTQUNoRCxDQUFDO0lBQ0osQ0FBQyxFQUFFO1FBQ0QscUJBQXFCO1FBQ3JCLHFCQUFxQjtRQUNyQixVQUFVLENBQUMsT0FBTztRQUNsQixVQUFVLENBQUMsZUFBZTtRQUMxQixVQUFVLENBQUMsVUFBVTtRQUNyQixVQUFVLENBQUMsT0FBTztRQUNsQixVQUFVLENBQUMsSUFBSTtRQUNmLFVBQVUsQ0FBQyxJQUFJO1FBQ2YsVUFBVSxDQUFDLGFBQWE7UUFDeEIsVUFBVSxDQUFDLGtDQUFrQztRQUM3QyxNQUFNO0tBQ1AsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUNMLGtCQUFDLDBCQUFhLENBQUMsUUFBUSxrQkFBQyxLQUFLLEVBQUUsS0FBSyxnQkFBRyxRQUFRLFlBQTBCLENBQzFFLENBQUM7QUFDSixDQUFDO0FBdkdELHdDQXVHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbm5lY3RUeXBlLFxuICBXYWxsZXQsXG4gIFdhbGxldENvbnRleHQsXG4gIFdhbGxldEluZm8sXG4gIFdhbGxldFN0YXRlcyxcbiAgV2FsbGV0U3RhdHVzLFxufSBmcm9tICdAdGVycmEtZGV2L3VzZS13YWxsZXQnO1xuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFdhbGxldENvbnRyb2xsZXIsIFdhbGxldENvbnRyb2xsZXJPcHRpb25zIH0gZnJvbSAnLi4vY29udHJvbGxlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FsbGV0UHJvdmlkZXJQcm9wcyBleHRlbmRzIFdhbGxldENvbnRyb2xsZXJPcHRpb25zIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuY29uc3QgRU1QVFlfQVJSQVk6IFdhbGxldEluZm9bXSA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gV2FsbGV0UHJvdmlkZXIoe1xuICBjaGlsZHJlbixcbiAgZGVmYXVsdE5ldHdvcmssXG4gIHdhbGxldENvbm5lY3RDaGFpbklkcyxcbiAgY29ubmVjdG9yT3B0cyxcbiAgcHVzaFNlcnZlck9wdHMsXG4gIGNyZWF0ZVJlYWRvbmx5V2FsbGV0U2Vzc2lvbixcbiAgd2FpdGluZ0Nocm9tZUV4dGVuc2lvbkluc3RhbGxDaGVjayxcbiAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2ssXG59OiBXYWxsZXRQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFtjb250cm9sbGVyXSA9IHVzZVN0YXRlPFdhbGxldENvbnRyb2xsZXI+KFxuICAgICgpID0+XG4gICAgICBuZXcgV2FsbGV0Q29udHJvbGxlcih7XG4gICAgICAgIGRlZmF1bHROZXR3b3JrLFxuICAgICAgICB3YWxsZXRDb25uZWN0Q2hhaW5JZHMsXG4gICAgICAgIGNvbm5lY3Rvck9wdHMsXG4gICAgICAgIHB1c2hTZXJ2ZXJPcHRzLFxuICAgICAgICBjcmVhdGVSZWFkb25seVdhbGxldFNlc3Npb24sXG4gICAgICAgIHdhaXRpbmdDaHJvbWVFeHRlbnNpb25JbnN0YWxsQ2hlY2ssXG4gICAgICAgIGRhbmdlcm91c2x5X19jaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlckNoZWNrLFxuICAgICAgfSksXG4gICk7XG5cbiAgY29uc3QgW2F2YWlsYWJsZUNvbm5lY3RUeXBlcywgc2V0QXZhaWxhYmxlQ29ubmVjdFR5cGVzXSA9IHVzZVN0YXRlPFxuICAgIENvbm5lY3RUeXBlW11cbiAgPigoKSA9PiBbXSk7XG5cbiAgY29uc3QgW2F2YWlsYWJsZUluc3RhbGxUeXBlcywgc2V0QXZhaWxhYmxlSW5zdGFsbFR5cGVzXSA9IHVzZVN0YXRlPFxuICAgIENvbm5lY3RUeXBlW11cbiAgPigoKSA9PiBbXSk7XG5cbiAgY29uc3QgW3N0YXRlcywgc2V0U3RhdGVzXSA9IHVzZVN0YXRlPFdhbGxldFN0YXRlcz4oKCkgPT4gKHtcbiAgICBzdGF0dXM6IFdhbGxldFN0YXR1cy5JTklUSUFMSVpJTkcsXG4gICAgbmV0d29yazogZGVmYXVsdE5ldHdvcmssXG4gIH0pKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGF2YWlsYWJsZUNvbm5lY3RUeXBlc1N1YnNjcmlwdGlvbiA9IGNvbnRyb2xsZXJcbiAgICAgIC5hdmFpbGFibGVDb25uZWN0VHlwZXMoKVxuICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHNldEF2YWlsYWJsZUNvbm5lY3RUeXBlcyh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgIGNvbnN0IGF2YWlsYWJsZUluc3RhbGxUeXBlc1N1YnNjcmlwdGlvbiA9IGNvbnRyb2xsZXJcbiAgICAgIC5hdmFpbGFibGVJbnN0YWxsVHlwZXMoKVxuICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHNldEF2YWlsYWJsZUluc3RhbGxUeXBlcyh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgIGNvbnN0IHN0YXRlc1N1YnNjcmlwdGlvbiA9IGNvbnRyb2xsZXIuc3RhdGVzKCkuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBzZXRTdGF0ZXModmFsdWUpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBhdmFpbGFibGVDb25uZWN0VHlwZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgc3RhdGVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2NvbnRyb2xsZXJdKTtcblxuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW88V2FsbGV0PigoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyxcbiAgICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlcyxcbiAgICAgIHN0YXR1czogc3RhdGVzLnN0YXR1cyxcbiAgICAgIG5ldHdvcms6IHN0YXRlcy5uZXR3b3JrLFxuICAgICAgd2FsbGV0czpcbiAgICAgICAgc3RhdGVzLnN0YXR1cyA9PT0gV2FsbGV0U3RhdHVzLldBTExFVF9DT05ORUNURURcbiAgICAgICAgICA/IHN0YXRlcy53YWxsZXRzXG4gICAgICAgICAgOiBFTVBUWV9BUlJBWSxcbiAgICAgIGluc3RhbGw6IGNvbnRyb2xsZXIuaW5zdGFsbCxcbiAgICAgIGNvbm5lY3Q6IGNvbnRyb2xsZXIuY29ubmVjdCxcbiAgICAgIGNvbm5lY3RSZWFkb25seTogY29udHJvbGxlci5jb25uZWN0UmVhZG9ubHksXG4gICAgICBkaXNjb25uZWN0OiBjb250cm9sbGVyLmRpc2Nvbm5lY3QsXG4gICAgICBwb3N0OiBjb250cm9sbGVyLnBvc3QsXG4gICAgICBzaWduOiBjb250cm9sbGVyLnNpZ24sXG4gICAgICByZWNoZWNrU3RhdHVzOiBjb250cm9sbGVyLnJlY2hlY2tTdGF0dXMsXG4gICAgICBpc0Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyOlxuICAgICAgICBjb250cm9sbGVyLmlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXIsXG4gICAgfTtcbiAgfSwgW1xuICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyxcbiAgICBhdmFpbGFibGVJbnN0YWxsVHlwZXMsXG4gICAgY29udHJvbGxlci5jb25uZWN0LFxuICAgIGNvbnRyb2xsZXIuY29ubmVjdFJlYWRvbmx5LFxuICAgIGNvbnRyb2xsZXIuZGlzY29ubmVjdCxcbiAgICBjb250cm9sbGVyLmluc3RhbGwsXG4gICAgY29udHJvbGxlci5wb3N0LFxuICAgIGNvbnRyb2xsZXIuc2lnbixcbiAgICBjb250cm9sbGVyLnJlY2hlY2tTdGF0dXMsXG4gICAgY29udHJvbGxlci5pc0Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyLFxuICAgIHN0YXRlcyxcbiAgXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8V2FsbGV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3RhdGV9PntjaGlsZHJlbn08L1dhbGxldENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG4iXX0=