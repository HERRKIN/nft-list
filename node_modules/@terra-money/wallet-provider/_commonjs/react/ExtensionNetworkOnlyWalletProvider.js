"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionNetworkOnlyWalletProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const use_wallet_1 = require("@terra-dev/use-wallet");
const react_1 = require("react");
const chrome_extension_1 = require("../modules/chrome-extension");
function ExtensionNetworkOnlyWalletProvider({ children, defaultNetwork, }) {
    const [controller] = react_1.useState(() => new chrome_extension_1.ChromeExtensionController({
        defaultNetwork,
        enableWalletConnection: false,
        dangerously__chromeExtensionCompatibleBrowserCheck: () => false,
    }));
    const [network, setNetwork] = react_1.useState(defaultNetwork);
    react_1.useEffect(() => {
        const networkSubscription = controller.networkInfo().subscribe({
            next: (value) => {
                setNetwork(value);
            },
        });
        return () => {
            networkSubscription.unsubscribe();
        };
    }, [controller]);
    const state = react_1.useMemo(() => {
        return {
            availableConnectTypes: [],
            availableInstallTypes: [],
            status: use_wallet_1.WalletStatus.WALLET_NOT_CONNECTED,
            network,
            wallets: [],
            install: () => {
                throw new Error('not implemented!');
            },
            connect: () => {
                throw new Error('not implemented!');
            },
            connectReadonly: () => {
                throw new Error('not implemented!');
            },
            disconnect: () => {
                throw new Error('not implemented!');
            },
            post: () => {
                throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support post()`);
            },
            sign: () => {
                throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support sign()`);
            },
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: () => {
                throw new Error('not implemented!');
            },
        };
    }, [controller.recheckStatus, network]);
    return (jsx_runtime_1.jsx(use_wallet_1.WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
exports.ExtensionNetworkOnlyWalletProvider = ExtensionNetworkOnlyWalletProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AdGVycmEtbW9uZXkvd2FsbGV0LXByb3ZpZGVyL3JlYWN0L0V4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzREFBNEU7QUFFNUUsaUNBQXVFO0FBQ3ZFLGtFQUF3RTtBQU94RSxTQUFnQixrQ0FBa0MsQ0FBQyxFQUNqRCxRQUFRLEVBQ1IsY0FBYyxHQUMwQjtJQUN4QyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsZ0JBQVEsQ0FDM0IsR0FBRyxFQUFFLENBQ0gsSUFBSSw0Q0FBeUIsQ0FBQztRQUM1QixjQUFjO1FBQ2Qsc0JBQXNCLEVBQUUsS0FBSztRQUM3QixrREFBa0QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLO0tBQ2hFLENBQUMsQ0FDTCxDQUFDO0lBRUYsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxnQkFBUSxDQUFjLGNBQWMsQ0FBQyxDQUFDO0lBRXBFLGlCQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQzdELElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNkLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQixDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLEVBQUU7WUFDVixtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUM7SUFDSixDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRWpCLE1BQU0sS0FBSyxHQUFHLGVBQU8sQ0FBUyxHQUFHLEVBQUU7UUFDakMsT0FBTztZQUNMLHFCQUFxQixFQUFFLEVBQUU7WUFDekIscUJBQXFCLEVBQUUsRUFBRTtZQUN6QixNQUFNLEVBQUUseUJBQVksQ0FBQyxvQkFBb0I7WUFDekMsT0FBTztZQUNQLE9BQU8sRUFBRSxFQUFFO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxlQUFlLEVBQUUsR0FBRyxFQUFFO2dCQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELFVBQVUsRUFBRSxHQUFHLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxJQUFJLEVBQUUsR0FBRyxFQUFFO2dCQUNULE1BQU0sSUFBSSxLQUFLLENBQ2IsOERBQThELENBQy9ELENBQUM7WUFDSixDQUFDO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxNQUFNLElBQUksS0FBSyxDQUNiLDhEQUE4RCxDQUMvRCxDQUFDO1lBQ0osQ0FBQztZQUNELGFBQWEsRUFBRSxVQUFVLENBQUMsYUFBYTtZQUN2QyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7Z0JBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUV4QyxPQUFPLENBQ0wsa0JBQUMsMEJBQWEsQ0FBQyxRQUFRLGtCQUFDLEtBQUssRUFBRSxLQUFLLGdCQUFHLFFBQVEsWUFBMEIsQ0FDMUUsQ0FBQztBQUNKLENBQUM7QUFsRUQsZ0ZBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2FsbGV0LCBXYWxsZXRDb250ZXh0LCBXYWxsZXRTdGF0dXMgfSBmcm9tICdAdGVycmEtZGV2L3VzZS13YWxsZXQnO1xuaW1wb3J0IHsgTmV0d29ya0luZm8gfSBmcm9tICdAdGVycmEtZGV2L3dhbGxldC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hyb21lRXh0ZW5zaW9uQ29udHJvbGxlciB9IGZyb20gJy4uL21vZHVsZXMvY2hyb21lLWV4dGVuc2lvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlclByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgZGVmYXVsdE5ldHdvcms6IE5ldHdvcmtJbmZvO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRXh0ZW5zaW9uTmV0d29ya09ubHlXYWxsZXRQcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICBkZWZhdWx0TmV0d29yayxcbn06IEV4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXJQcm9wcykge1xuICBjb25zdCBbY29udHJvbGxlcl0gPSB1c2VTdGF0ZTxDaHJvbWVFeHRlbnNpb25Db250cm9sbGVyPihcbiAgICAoKSA9PlxuICAgICAgbmV3IENocm9tZUV4dGVuc2lvbkNvbnRyb2xsZXIoe1xuICAgICAgICBkZWZhdWx0TmV0d29yayxcbiAgICAgICAgZW5hYmxlV2FsbGV0Q29ubmVjdGlvbjogZmFsc2UsXG4gICAgICAgIGRhbmdlcm91c2x5X19jaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlckNoZWNrOiAoKSA9PiBmYWxzZSxcbiAgICAgIH0pLFxuICApO1xuXG4gIGNvbnN0IFtuZXR3b3JrLCBzZXROZXR3b3JrXSA9IHVzZVN0YXRlPE5ldHdvcmtJbmZvPihkZWZhdWx0TmV0d29yayk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBuZXR3b3JrU3Vic2NyaXB0aW9uID0gY29udHJvbGxlci5uZXR3b3JrSW5mbygpLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiAodmFsdWUpID0+IHtcbiAgICAgICAgc2V0TmV0d29yayh2YWx1ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG5ldHdvcmtTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbY29udHJvbGxlcl0pO1xuXG4gIGNvbnN0IHN0YXRlID0gdXNlTWVtbzxXYWxsZXQ+KCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYXZhaWxhYmxlQ29ubmVjdFR5cGVzOiBbXSxcbiAgICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlczogW10sXG4gICAgICBzdGF0dXM6IFdhbGxldFN0YXR1cy5XQUxMRVRfTk9UX0NPTk5FQ1RFRCxcbiAgICAgIG5ldHdvcmssXG4gICAgICB3YWxsZXRzOiBbXSxcbiAgICAgIGluc3RhbGw6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgY29ubmVjdDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBjb25uZWN0UmVhZG9ubHk6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgZGlzY29ubmVjdDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBwb3N0OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgPEV4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgcG9zdCgpYCxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBzaWduOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgPEV4dGVuc2lvbk5ldHdvcmtPbmx5V2FsbGV0UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgc2lnbigpYCxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICByZWNoZWNrU3RhdHVzOiBjb250cm9sbGVyLnJlY2hlY2tTdGF0dXMsXG4gICAgICBpc0Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICB9O1xuICB9LCBbY29udHJvbGxlci5yZWNoZWNrU3RhdHVzLCBuZXR3b3JrXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8V2FsbGV0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17c3RhdGV9PntjaGlsZHJlbn08L1dhbGxldENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG4iXX0=