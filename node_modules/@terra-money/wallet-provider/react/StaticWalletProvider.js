import { jsx as _jsx } from "react/jsx-runtime";
import { WalletContext, WalletStatus, } from '@terra-dev/use-wallet';
import { useMemo } from 'react';
export function StaticWalletProvider({ children, defaultNetwork, status = WalletStatus.INITIALIZING, availableConnectTypes = [], availableInstallTypes = [], wallets = [], }) {
    const state = useMemo(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            status,
            network: defaultNetwork,
            wallets,
            install: () => {
                throw new Error('not implemented!');
            },
            connect: () => {
                throw new Error('not implemented!');
            },
            connectReadonly: () => {
                throw new Error('not implemented!');
            },
            disconnect: () => {
                throw new Error('not implemented!');
            },
            post: () => {
                throw new Error('not implemented!');
            },
            sign: () => {
                throw new Error('not implemented!');
            },
            recheckStatus: () => {
                throw new Error('not implemented!');
            },
            isChromeExtensionCompatibleBrowser: () => {
                throw new Error('not implemented!');
            },
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        defaultNetwork,
        status,
        wallets,
    ]);
    return (_jsx(WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGljV2FsbGV0UHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dhbGxldC1wcm92aWRlci9yZWFjdC9TdGF0aWNXYWxsZXRQcm92aWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFHTCxhQUFhLEVBRWIsWUFBWSxHQUNiLE1BQU0sdUJBQXVCLENBQUM7QUFFL0IsT0FBYyxFQUFhLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQVdsRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsRUFDbkMsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEdBQUcsWUFBWSxDQUFDLFlBQVksRUFDbEMscUJBQXFCLEdBQUcsRUFBRSxFQUMxQixxQkFBcUIsR0FBRyxFQUFFLEVBQzFCLE9BQU8sR0FBRyxFQUFFLEdBQ2M7SUFDMUIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFTLEdBQUcsRUFBRTtRQUNqQyxPQUFPO1lBQ0wscUJBQXFCO1lBQ3JCLHFCQUFxQjtZQUNyQixNQUFNO1lBQ04sT0FBTyxFQUFFLGNBQWM7WUFDdkIsT0FBTztZQUNQLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsZUFBZSxFQUFFLEdBQUcsRUFBRTtnQkFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxVQUFVLEVBQUUsR0FBRyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN0QyxDQUFDO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxhQUFhLEVBQUUsR0FBRyxFQUFFO2dCQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQyxFQUFFO1FBQ0QscUJBQXFCO1FBQ3JCLHFCQUFxQjtRQUNyQixjQUFjO1FBQ2QsTUFBTTtRQUNOLE9BQU87S0FDUixDQUFDLENBQUM7SUFFSCxPQUFPLENBQ0wsS0FBQyxhQUFhLENBQUMsUUFBUSxrQkFBQyxLQUFLLEVBQUUsS0FBSyxnQkFBRyxRQUFRLFlBQTBCLENBQzFFLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29ubmVjdFR5cGUsXG4gIFdhbGxldCxcbiAgV2FsbGV0Q29udGV4dCxcbiAgV2FsbGV0SW5mbyxcbiAgV2FsbGV0U3RhdHVzLFxufSBmcm9tICdAdGVycmEtZGV2L3VzZS13YWxsZXQnO1xuaW1wb3J0IHsgTmV0d29ya0luZm8gfSBmcm9tICdAdGVycmEtZGV2L3dhbGxldC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY1dhbGxldFByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBkZWZhdWx0TmV0d29yazogTmV0d29ya0luZm87XG4gIHN0YXR1cz86IFdhbGxldFN0YXR1cztcbiAgYXZhaWxhYmxlQ29ubmVjdFR5cGVzPzogQ29ubmVjdFR5cGVbXTtcbiAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzPzogQ29ubmVjdFR5cGVbXTtcbiAgd2FsbGV0cz86IFdhbGxldEluZm9bXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN0YXRpY1dhbGxldFByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIGRlZmF1bHROZXR3b3JrLFxuICBzdGF0dXMgPSBXYWxsZXRTdGF0dXMuSU5JVElBTElaSU5HLFxuICBhdmFpbGFibGVDb25uZWN0VHlwZXMgPSBbXSxcbiAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzID0gW10sXG4gIHdhbGxldHMgPSBbXSxcbn06IFN0YXRpY1dhbGxldFByb3ZpZGVyUHJvcHMpIHtcbiAgY29uc3Qgc3RhdGUgPSB1c2VNZW1vPFdhbGxldD4oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBhdmFpbGFibGVDb25uZWN0VHlwZXMsXG4gICAgICBhdmFpbGFibGVJbnN0YWxsVHlwZXMsXG4gICAgICBzdGF0dXMsXG4gICAgICBuZXR3b3JrOiBkZWZhdWx0TmV0d29yayxcbiAgICAgIHdhbGxldHMsXG4gICAgICBpbnN0YWxsOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGNvbm5lY3Q6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgY29ubmVjdFJlYWRvbmx5OiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIGRpc2Nvbm5lY3Q6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgcG9zdDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgICBzaWduOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkIScpO1xuICAgICAgfSxcbiAgICAgIHJlY2hlY2tTdGF0dXM6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgICB9LFxuICAgICAgaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcjogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSwgW1xuICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlcyxcbiAgICBhdmFpbGFibGVJbnN0YWxsVHlwZXMsXG4gICAgZGVmYXVsdE5ldHdvcmssXG4gICAgc3RhdHVzLFxuICAgIHdhbGxldHMsXG4gIF0pO1xuXG4gIHJldHVybiAoXG4gICAgPFdhbGxldENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT57Y2hpbGRyZW59PC9XYWxsZXRDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIl19