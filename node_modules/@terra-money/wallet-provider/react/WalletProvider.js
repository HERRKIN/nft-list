import { jsx as _jsx } from "react/jsx-runtime";
import { WalletContext, WalletStatus, } from '@terra-dev/use-wallet';
import { useEffect, useMemo, useState } from 'react';
import { WalletController } from '../controller';
const EMPTY_ARRAY = [];
export function WalletProvider({ children, defaultNetwork, walletConnectChainIds, connectorOpts, pushServerOpts, createReadonlyWalletSession, waitingChromeExtensionInstallCheck, dangerously__chromeExtensionCompatibleBrowserCheck, }) {
    const [controller] = useState(() => new WalletController({
        defaultNetwork,
        walletConnectChainIds,
        connectorOpts,
        pushServerOpts,
        createReadonlyWalletSession,
        waitingChromeExtensionInstallCheck,
        dangerously__chromeExtensionCompatibleBrowserCheck,
    }));
    const [availableConnectTypes, setAvailableConnectTypes] = useState(() => []);
    const [availableInstallTypes, setAvailableInstallTypes] = useState(() => []);
    const [states, setStates] = useState(() => ({
        status: WalletStatus.INITIALIZING,
        network: defaultNetwork,
    }));
    useEffect(() => {
        const availableConnectTypesSubscription = controller
            .availableConnectTypes()
            .subscribe({
            next: (value) => {
                setAvailableConnectTypes(value);
            },
        });
        const availableInstallTypesSubscription = controller
            .availableInstallTypes()
            .subscribe({
            next: (value) => {
                setAvailableInstallTypes(value);
            },
        });
        const statesSubscription = controller.states().subscribe({
            next: (value) => {
                setStates(value);
            },
        });
        return () => {
            availableConnectTypesSubscription.unsubscribe();
            availableInstallTypesSubscription.unsubscribe();
            statesSubscription.unsubscribe();
        };
    }, [controller]);
    const state = useMemo(() => {
        return {
            availableConnectTypes,
            availableInstallTypes,
            status: states.status,
            network: states.network,
            wallets: states.status === WalletStatus.WALLET_CONNECTED
                ? states.wallets
                : EMPTY_ARRAY,
            install: controller.install,
            connect: controller.connect,
            connectReadonly: controller.connectReadonly,
            disconnect: controller.disconnect,
            post: controller.post,
            sign: controller.sign,
            recheckStatus: controller.recheckStatus,
            isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser,
        };
    }, [
        availableConnectTypes,
        availableInstallTypes,
        controller.connect,
        controller.connectReadonly,
        controller.disconnect,
        controller.install,
        controller.post,
        controller.sign,
        controller.recheckStatus,
        controller.isChromeExtensionCompatibleBrowser,
        states,
    ]);
    return (_jsx(WalletContext.Provider, Object.assign({ value: state }, { children: children }), void 0));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGV0UHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHRlcnJhLW1vbmV5L3dhbGxldC1wcm92aWRlci9yZWFjdC9XYWxsZXRQcm92aWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFHTCxhQUFhLEVBR2IsWUFBWSxHQUNiLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBYyxFQUFhLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFNMUUsTUFBTSxXQUFXLEdBQWlCLEVBQUUsQ0FBQztBQUVyQyxNQUFNLFVBQVUsY0FBYyxDQUFDLEVBQzdCLFFBQVEsRUFDUixjQUFjLEVBQ2QscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYixjQUFjLEVBQ2QsMkJBQTJCLEVBQzNCLGtDQUFrQyxFQUNsQyxrREFBa0QsR0FDOUI7SUFDcEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FDM0IsR0FBRyxFQUFFLENBQ0gsSUFBSSxnQkFBZ0IsQ0FBQztRQUNuQixjQUFjO1FBQ2QscUJBQXFCO1FBQ3JCLGFBQWE7UUFDYixjQUFjO1FBQ2QsMkJBQTJCO1FBQzNCLGtDQUFrQztRQUNsQyxrREFBa0Q7S0FDbkQsQ0FBQyxDQUNMLENBQUM7SUFFRixNQUFNLENBQUMscUJBQXFCLEVBQUUsd0JBQXdCLENBQUMsR0FBRyxRQUFRLENBRWhFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRVosTUFBTSxDQUFDLHFCQUFxQixFQUFFLHdCQUF3QixDQUFDLEdBQUcsUUFBUSxDQUVoRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVaLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFlLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEQsTUFBTSxFQUFFLFlBQVksQ0FBQyxZQUFZO1FBQ2pDLE9BQU8sRUFBRSxjQUFjO0tBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBRUosU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0saUNBQWlDLEdBQUcsVUFBVTthQUNqRCxxQkFBcUIsRUFBRTthQUN2QixTQUFTLENBQUM7WUFDVCxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDZCx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBRUwsTUFBTSxpQ0FBaUMsR0FBRyxVQUFVO2FBQ2pELHFCQUFxQixFQUFFO2FBQ3ZCLFNBQVMsQ0FBQztZQUNULElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNkLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLENBQUM7U0FDRixDQUFDLENBQUM7UUFFTCxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDdkQsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2QsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsRUFBRTtZQUNWLGlDQUFpQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hELGlDQUFpQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hELGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFFakIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFTLEdBQUcsRUFBRTtRQUNqQyxPQUFPO1lBQ0wscUJBQXFCO1lBQ3JCLHFCQUFxQjtZQUNyQixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDckIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3ZCLE9BQU8sRUFDTCxNQUFNLENBQUMsTUFBTSxLQUFLLFlBQVksQ0FBQyxnQkFBZ0I7Z0JBQzdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDaEIsQ0FBQyxDQUFDLFdBQVc7WUFDakIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO1lBQzNCLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTztZQUMzQixlQUFlLEVBQUUsVUFBVSxDQUFDLGVBQWU7WUFDM0MsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVO1lBQ2pDLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtZQUNyQixJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7WUFDckIsYUFBYSxFQUFFLFVBQVUsQ0FBQyxhQUFhO1lBQ3ZDLGtDQUFrQyxFQUNoQyxVQUFVLENBQUMsa0NBQWtDO1NBQ2hELENBQUM7SUFDSixDQUFDLEVBQUU7UUFDRCxxQkFBcUI7UUFDckIscUJBQXFCO1FBQ3JCLFVBQVUsQ0FBQyxPQUFPO1FBQ2xCLFVBQVUsQ0FBQyxlQUFlO1FBQzFCLFVBQVUsQ0FBQyxVQUFVO1FBQ3JCLFVBQVUsQ0FBQyxPQUFPO1FBQ2xCLFVBQVUsQ0FBQyxJQUFJO1FBQ2YsVUFBVSxDQUFDLElBQUk7UUFDZixVQUFVLENBQUMsYUFBYTtRQUN4QixVQUFVLENBQUMsa0NBQWtDO1FBQzdDLE1BQU07S0FDUCxDQUFDLENBQUM7SUFFSCxPQUFPLENBQ0wsS0FBQyxhQUFhLENBQUMsUUFBUSxrQkFBQyxLQUFLLEVBQUUsS0FBSyxnQkFBRyxRQUFRLFlBQTBCLENBQzFFLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29ubmVjdFR5cGUsXG4gIFdhbGxldCxcbiAgV2FsbGV0Q29udGV4dCxcbiAgV2FsbGV0SW5mbyxcbiAgV2FsbGV0U3RhdGVzLFxuICBXYWxsZXRTdGF0dXMsXG59IGZyb20gJ0B0ZXJyYS1kZXYvdXNlLXdhbGxldCc7XG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgV2FsbGV0Q29udHJvbGxlciwgV2FsbGV0Q29udHJvbGxlck9wdGlvbnMgfSBmcm9tICcuLi9jb250cm9sbGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBXYWxsZXRQcm92aWRlclByb3BzIGV4dGVuZHMgV2FsbGV0Q29udHJvbGxlck9wdGlvbnMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufVxuXG5jb25zdCBFTVBUWV9BUlJBWTogV2FsbGV0SW5mb1tdID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBXYWxsZXRQcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICBkZWZhdWx0TmV0d29yayxcbiAgd2FsbGV0Q29ubmVjdENoYWluSWRzLFxuICBjb25uZWN0b3JPcHRzLFxuICBwdXNoU2VydmVyT3B0cyxcbiAgY3JlYXRlUmVhZG9ubHlXYWxsZXRTZXNzaW9uLFxuICB3YWl0aW5nQ2hyb21lRXh0ZW5zaW9uSW5zdGFsbENoZWNrLFxuICBkYW5nZXJvdXNseV9fY2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXJDaGVjayxcbn06IFdhbGxldFByb3ZpZGVyUHJvcHMpIHtcbiAgY29uc3QgW2NvbnRyb2xsZXJdID0gdXNlU3RhdGU8V2FsbGV0Q29udHJvbGxlcj4oXG4gICAgKCkgPT5cbiAgICAgIG5ldyBXYWxsZXRDb250cm9sbGVyKHtcbiAgICAgICAgZGVmYXVsdE5ldHdvcmssXG4gICAgICAgIHdhbGxldENvbm5lY3RDaGFpbklkcyxcbiAgICAgICAgY29ubmVjdG9yT3B0cyxcbiAgICAgICAgcHVzaFNlcnZlck9wdHMsXG4gICAgICAgIGNyZWF0ZVJlYWRvbmx5V2FsbGV0U2Vzc2lvbixcbiAgICAgICAgd2FpdGluZ0Nocm9tZUV4dGVuc2lvbkluc3RhbGxDaGVjayxcbiAgICAgICAgZGFuZ2Vyb3VzbHlfX2Nocm9tZUV4dGVuc2lvbkNvbXBhdGlibGVCcm93c2VyQ2hlY2ssXG4gICAgICB9KSxcbiAgKTtcblxuICBjb25zdCBbYXZhaWxhYmxlQ29ubmVjdFR5cGVzLCBzZXRBdmFpbGFibGVDb25uZWN0VHlwZXNdID0gdXNlU3RhdGU8XG4gICAgQ29ubmVjdFR5cGVbXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbYXZhaWxhYmxlSW5zdGFsbFR5cGVzLCBzZXRBdmFpbGFibGVJbnN0YWxsVHlwZXNdID0gdXNlU3RhdGU8XG4gICAgQ29ubmVjdFR5cGVbXVxuICA+KCgpID0+IFtdKTtcblxuICBjb25zdCBbc3RhdGVzLCBzZXRTdGF0ZXNdID0gdXNlU3RhdGU8V2FsbGV0U3RhdGVzPigoKSA9PiAoe1xuICAgIHN0YXR1czogV2FsbGV0U3RhdHVzLklOSVRJQUxJWklORyxcbiAgICBuZXR3b3JrOiBkZWZhdWx0TmV0d29yayxcbiAgfSkpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgYXZhaWxhYmxlQ29ubmVjdFR5cGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlclxuICAgICAgLmF2YWlsYWJsZUNvbm5lY3RUeXBlcygpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2V0QXZhaWxhYmxlQ29ubmVjdFR5cGVzKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlSW5zdGFsbFR5cGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlclxuICAgICAgLmF2YWlsYWJsZUluc3RhbGxUeXBlcygpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2V0QXZhaWxhYmxlSW5zdGFsbFR5cGVzKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhdGVzU3Vic2NyaXB0aW9uID0gY29udHJvbGxlci5zdGF0ZXMoKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgIHNldFN0YXRlcyh2YWx1ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGF2YWlsYWJsZUNvbm5lY3RUeXBlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICBzdGF0ZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbY29udHJvbGxlcl0pO1xuXG4gIGNvbnN0IHN0YXRlID0gdXNlTWVtbzxXYWxsZXQ+KCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYXZhaWxhYmxlQ29ubmVjdFR5cGVzLFxuICAgICAgYXZhaWxhYmxlSW5zdGFsbFR5cGVzLFxuICAgICAgc3RhdHVzOiBzdGF0ZXMuc3RhdHVzLFxuICAgICAgbmV0d29yazogc3RhdGVzLm5ldHdvcmssXG4gICAgICB3YWxsZXRzOlxuICAgICAgICBzdGF0ZXMuc3RhdHVzID09PSBXYWxsZXRTdGF0dXMuV0FMTEVUX0NPTk5FQ1RFRFxuICAgICAgICAgID8gc3RhdGVzLndhbGxldHNcbiAgICAgICAgICA6IEVNUFRZX0FSUkFZLFxuICAgICAgaW5zdGFsbDogY29udHJvbGxlci5pbnN0YWxsLFxuICAgICAgY29ubmVjdDogY29udHJvbGxlci5jb25uZWN0LFxuICAgICAgY29ubmVjdFJlYWRvbmx5OiBjb250cm9sbGVyLmNvbm5lY3RSZWFkb25seSxcbiAgICAgIGRpc2Nvbm5lY3Q6IGNvbnRyb2xsZXIuZGlzY29ubmVjdCxcbiAgICAgIHBvc3Q6IGNvbnRyb2xsZXIucG9zdCxcbiAgICAgIHNpZ246IGNvbnRyb2xsZXIuc2lnbixcbiAgICAgIHJlY2hlY2tTdGF0dXM6IGNvbnRyb2xsZXIucmVjaGVja1N0YXR1cyxcbiAgICAgIGlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXI6XG4gICAgICAgIGNvbnRyb2xsZXIuaXNDaHJvbWVFeHRlbnNpb25Db21wYXRpYmxlQnJvd3NlcixcbiAgICB9O1xuICB9LCBbXG4gICAgYXZhaWxhYmxlQ29ubmVjdFR5cGVzLFxuICAgIGF2YWlsYWJsZUluc3RhbGxUeXBlcyxcbiAgICBjb250cm9sbGVyLmNvbm5lY3QsXG4gICAgY29udHJvbGxlci5jb25uZWN0UmVhZG9ubHksXG4gICAgY29udHJvbGxlci5kaXNjb25uZWN0LFxuICAgIGNvbnRyb2xsZXIuaW5zdGFsbCxcbiAgICBjb250cm9sbGVyLnBvc3QsXG4gICAgY29udHJvbGxlci5zaWduLFxuICAgIGNvbnRyb2xsZXIucmVjaGVja1N0YXR1cyxcbiAgICBjb250cm9sbGVyLmlzQ2hyb21lRXh0ZW5zaW9uQ29tcGF0aWJsZUJyb3dzZXIsXG4gICAgc3RhdGVzLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxXYWxsZXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+e2NoaWxkcmVufTwvV2FsbGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cbiJdfQ==