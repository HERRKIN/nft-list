{"ast":null,"code":"import { UserDenied } from '@terra-dev/wallet-types';\nimport { ChromeExtensionCreateTxFailed, ChromeExtensionTxFailed, ChromeExtensionUnspecifiedError } from './errors';\n\nfunction toExplicitError(error) {\n  if (error && 'code' in error) {\n    switch (error.code) {\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182\n      case 1:\n        return new UserDenied();\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137\n\n      case 2:\n        if (error.data) {\n          const {\n            txhash\n          } = error.data;\n          return new ChromeExtensionTxFailed(txhash, error.message);\n        } else {\n          return new ChromeExtensionTxFailed(undefined, error.message);\n        }\n\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153\n\n      case 3:\n        return new ChromeExtensionCreateTxFailed(error.message);\n\n      default:\n        return new ChromeExtensionUnspecifiedError(error.message);\n    }\n  } else {\n    return new ChromeExtensionUnspecifiedError();\n  }\n}\n\nexport function extensionFixer(extension) {\n  let _inTransactionProgress = false;\n  const postResolvers = new Map();\n  const signResolvers = new Map();\n  const infoResolvers = new Set();\n  const connectResolvers = new Set();\n  extension.on('onPost', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    if (!postResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = postResolvers.get(payload.id);\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({\n        name: 'onPost',\n        payload\n      });\n    }\n\n    postResolvers.delete(payload.id);\n\n    if (postResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n  extension.on('onSign', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    if (!signResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = signResolvers.get(payload.id);\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({\n        name: 'onSign',\n        payload\n      });\n    }\n\n    signResolvers.delete(payload.id);\n\n    if (signResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n  extension.on('onInfo', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    for (const [resolve, reject] of infoResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    infoResolvers.clear();\n  });\n  extension.on('onConnect', result => {\n    if (!result) return;\n    const {\n      error,\n      ...payload\n    } = result;\n\n    for (const [resolve, reject] of connectResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    connectResolvers.clear();\n  });\n\n  function post(data) {\n    return new Promise((...resolver) => {\n      _inTransactionProgress = true;\n      const id = extension.post({ ...data,\n        purgeQueue: true\n      });\n      postResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (postResolvers.has(id)) {\n          postResolvers.delete(id);\n\n          if (postResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function sign(data) {\n    return new Promise((...resolver) => {\n      _inTransactionProgress = true;\n      const id = extension.sign({ ...data,\n        purgeQueue: true\n      });\n      signResolvers.set(id, resolver);\n      setTimeout(() => {\n        if (signResolvers.has(id)) {\n          signResolvers.delete(id);\n\n          if (signResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function connect() {\n    return new Promise((...resolver) => {\n      connectResolvers.add(resolver);\n      extension.connect();\n    });\n  }\n\n  function info() {\n    return new Promise((...resolver) => {\n      infoResolvers.add(resolver);\n      extension.info();\n    });\n  }\n\n  function isAvailable() {\n    return extension.isAvailable;\n  }\n\n  function inTransactionProgress() {\n    return _inTransactionProgress;\n  }\n\n  return {\n    post,\n    sign,\n    connect,\n    info,\n    isAvailable,\n    inTransactionProgress\n  };\n}","map":{"version":3,"sources":["../../../src/@terra-dev/chrome-extension/extensionFixer.ts"],"names":[],"mappings":"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","sourcesContent":["import { NetworkInfo, UserDenied } from '@terra-dev/wallet-types';\nimport { Extension } from '@terra-money/terra.js';\nimport {\n  ChromeExtensionCreateTxFailed,\n  ChromeExtensionTxFailed,\n  ChromeExtensionUnspecifiedError,\n} from './errors';\n\ntype ConnectResponse = { address?: string };\ntype PostResponse = any;\ntype SignResponse = any;\ntype InfoResponse = NetworkInfo;\n\nexport interface FixedExtension {\n  isAvailable: () => boolean;\n  post: (data: object) => Promise<PostResponse>;\n  sign: (data: object) => Promise<SignResponse>;\n  info: () => Promise<InfoResponse>;\n  connect: () => Promise<ConnectResponse>;\n  inTransactionProgress: () => boolean;\n}\n\nfunction toExplicitError(error: any) {\n  if (error && 'code' in error) {\n    switch (error.code) {\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L182\n      case 1:\n        return new UserDenied();\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L137\n      case 2:\n        if (error.data) {\n          const { txhash } = error.data;\n          return new ChromeExtensionTxFailed(txhash, error.message);\n        } else {\n          return new ChromeExtensionTxFailed(undefined, error.message);\n        }\n      // @see https://github.com/terra-project/station/blob/main/src/extension/Confirm.tsx#L153\n      case 3:\n        return new ChromeExtensionCreateTxFailed(error.message);\n      default:\n        return new ChromeExtensionUnspecifiedError(error.message);\n    }\n  } else {\n    return new ChromeExtensionUnspecifiedError();\n  }\n}\n\nexport function extensionFixer(extension: Extension): FixedExtension {\n  let _inTransactionProgress = false;\n\n  const postResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const signResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  const infoResolvers = new Set<[(data: any) => void, (error: any) => void]>();\n\n  const connectResolvers = new Set<\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  extension.on('onPost', (result) => {\n    if (!result) return;\n\n    const { error, ...payload } = result;\n\n    if (!postResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = postResolvers.get(payload.id)!;\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({ name: 'onPost', payload });\n    }\n\n    postResolvers.delete(payload.id);\n\n    if (postResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n\n  extension.on('onSign', (result) => {\n    if (!result) return;\n\n    const { error, ...payload } = result;\n\n    if (!signResolvers.has(payload.id)) {\n      return;\n    }\n\n    const [resolve, reject] = signResolvers.get(payload.id)!;\n\n    if (!payload.success) {\n      reject(toExplicitError(error));\n    } else if (resolve) {\n      resolve({ name: 'onSign', payload });\n    }\n\n    signResolvers.delete(payload.id);\n\n    if (signResolvers.size === 0) {\n      _inTransactionProgress = false;\n    }\n  });\n\n  extension.on('onInfo', (result) => {\n    if (!result) return;\n    const { error, ...payload } = result;\n\n    for (const [resolve, reject] of infoResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    infoResolvers.clear();\n  });\n\n  extension.on('onConnect', (result) => {\n    if (!result) return;\n    const { error, ...payload } = result;\n\n    for (const [resolve, reject] of connectResolvers) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(payload);\n      }\n    }\n\n    connectResolvers.clear();\n  });\n\n  function post(data: object) {\n    return new Promise<PostResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.post({\n        ...(data as any),\n        purgeQueue: true,\n      });\n\n      postResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (postResolvers.has(id)) {\n          postResolvers.delete(id);\n\n          if (postResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function sign(data: object) {\n    return new Promise<SignResponse>((...resolver) => {\n      _inTransactionProgress = true;\n\n      const id = extension.sign({\n        ...(data as any),\n        purgeQueue: true,\n      });\n\n      signResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (signResolvers.has(id)) {\n          signResolvers.delete(id);\n\n          if (signResolvers.size === 0) {\n            _inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  function connect() {\n    return new Promise<ConnectResponse>((...resolver) => {\n      connectResolvers.add(resolver);\n      extension.connect();\n    });\n  }\n\n  function info() {\n    return new Promise<InfoResponse>((...resolver) => {\n      infoResolvers.add(resolver);\n      extension.info();\n    });\n  }\n\n  function isAvailable() {\n    return extension.isAvailable;\n  }\n\n  function inTransactionProgress() {\n    return _inTransactionProgress;\n  }\n\n  return {\n    post,\n    sign,\n    connect,\n    info,\n    isAvailable,\n    inTransactionProgress,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}