{"ast":null,"code":"import { WebConnectorStatusType } from '@terra-dev/web-connector-interface';\nimport bowser from 'bowser';\nimport { BehaviorSubject } from 'rxjs';\n\nasync function getConnector(hostWindow) {\n  return new Promise(resolve => {\n    let count = 20;\n\n    function task() {\n      if (--count > 0) {\n        if (typeof hostWindow.terraWebConnectors !== 'undefined' && Array.isArray(hostWindow.terraWebConnectors) && hostWindow.terraWebConnectors.length > 0) {\n          console.log(`TerraWebConnector: `, JSON.stringify(hostWindow.terraWebConnectors[0].getInfo()));\n          resolve(hostWindow.terraWebConnectors[0]);\n        } else {\n          console.warn(`Can't find window.terraWebConnectors. wait 500ms...`);\n          setTimeout(task, 500);\n        }\n      } else {\n        resolve(undefined);\n      }\n    }\n\n    task();\n  });\n}\n\nexport class WebConnectorController {\n  constructor(hostWindow) {\n    this.hostWindow = hostWindow;\n    this._connector = null;\n    /**\n     * Refetch the clientsStates\n     *\n     * You don't need call this method in most cases.\n     * Normally, when the clientStates is changed, states() get the new clientStates.\n     *\n     * @example\n     * client.states()\n     *       .subscribe(states => {\n     *         // 2. will get new clientStates\n     *         console.log('Got new states', Date.now())\n     *       })\n     *\n     * function callback() {\n     *   // 1. refetch client states\n     *   client.refetchStates()\n     * }\n     */\n\n    this.refetchStates = () => {\n      var _a;\n\n      (_a = this._connector) === null || _a === void 0 ? void 0 : _a.refetchStates();\n    };\n    /**\n     * Request approval connection to the Extension. (Connect)\n     */\n\n\n    this.requestApproval = () => {\n      var _a;\n\n      (_a = this._connector) === null || _a === void 0 ? void 0 : _a.requestApproval();\n    };\n\n    this.status = () => {\n      return this._status.asObservable();\n    };\n\n    this.getLastStatus = () => {\n      return this._status.getValue();\n    };\n    /**\n     * Execute transaction\n     *\n     * @example\n     * client.post(terraAddress, tx: CreateTxOptions)\n     *       .subscribe({\n     *          next: (result: WebConnectorTxProgress | WebConnectorTxSucceed) => {\n     *            switch (result.status) {\n     *              case WebConnectorTxStatus.PROGRESS:\n     *                console.log('in progress', result.payload)\n     *                break;\n     *              case WebConnectorTxStatus.SUCCEED:\n     *                console.log('succeed', result.payload)\n     *                break;\n     *            }\n     *          },\n     *          error: (error) => {\n     *            if (error instanceof WebConnectorUserDenied) {\n     *              console.log('user denied')\n     *            } else if (error instanceof WebConnectorCreateTxFailed) {\n     *              console.log('create tx failed', error.message)\n     *            } else if (error instanceof WebConnectorTxFailed) {\n     *              console.log('tx failed', error.txhash, error.message, error.raw_message)\n     *            } else {\n     *              console.log('unspecified error', 'message' in error ? error.message : String(error))\n     *            }\n     *          }\n     *       })\n     *\n     * @description The stream will be\n     * TxProgress -> [...TxProgress] -> TxSucceed\n     *\n     * - Tx is Succeed : TxProgress -> [...TxProgress] -> TxSucceed\n     */\n\n\n    this.post = (terraAddress, tx) => {\n      return this._connector.post(terraAddress, tx);\n    };\n    /**\n     * Add CW20 Token to extension dashboard\n     */\n\n\n    this.addCW20Tokens = (chainID, ...tokenAddrs) => {\n      return this._connector.addCW20Tokens(chainID, ...tokenAddrs);\n    };\n\n    this.hasCW20Tokens = (chainID, ...tokenAddrs) => {\n      return this._connector.hasCW20Tokens(chainID, ...tokenAddrs);\n    };\n    /**\n     * @example\n     * client.states()\n     *       .subscribe(states => {\n     *         if (!states) {\n     *           console.log('client is still not ready')\n     *         } else {\n     *           console.log('current network is', states.network)\n     *           console.log('current wallets are', states.wallets)\n     *         }\n     *       })\n     */\n\n\n    this.states = () => {\n      return this._states.asObservable();\n    };\n\n    this.getLastStates = () => {\n      return this._states.getValue();\n    };\n    /**\n     * Destroy this client\n     *\n     * - Unsubscribe all RxJs Subjects (every Observables are stoped)\n     */\n\n\n    this.destroy = () => {\n      var _a;\n\n      (_a = this._connector) === null || _a === void 0 ? void 0 : _a.close();\n      this._connector = null;\n    };\n\n    this._status = new BehaviorSubject({\n      type: WebConnectorStatusType.INITIALIZING\n    });\n    this._states = new BehaviorSubject(null);\n    const browser = bowser.getParser(navigator.userAgent); //@ts-ignore\n\n    getConnector(hostWindow).then(connector => {\n      if (!connector) {\n        const name = browser.getBrowserName(true);\n        let installLink;\n\n        switch (name) {\n          case 'chrome':\n          case 'microsoft edge':\n            installLink = 'https://google.com/chrome';\n            break;\n\n          case 'firefox':\n            installLink = 'https://google.com/firefox';\n            break;\n\n          case 'safari':\n            installLink = 'https://google.com/safari';\n            break;\n\n          default:\n            installLink = 'https://google.com/chrome';\n            break;\n        }\n\n        this._status.next({\n          type: WebConnectorStatusType.NO_AVAILABLE,\n          isConnectorExists: false,\n          installLink\n        });\n\n        return;\n      }\n\n      if (!connector.checkBrowserAvailability(navigator.userAgent)) {\n        this._status.next({\n          type: WebConnectorStatusType.NO_AVAILABLE,\n          isConnectorExists: true,\n          isSupportBrowser: false\n        });\n\n        return;\n      }\n\n      connector.open(hostWindow, this._status, this._states);\n      this._connector = connector;\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/@terra-dev/web-connector-controller/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  TerraWebConnector,\n  WebConnectorStates,\n  WebConnectorStatus,\n  WebConnectorStatusType,\n  WebConnectorTxResult,\n} from '@terra-dev/web-connector-interface';\nimport { CreateTxOptions } from '@terra-money/terra.js';\nimport bowser from 'bowser';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nasync function getConnector(hostWindow: {\n  terraWebConnectors: TerraWebConnector[] | undefined;\n}): Promise<TerraWebConnector | undefined> {\n  return new Promise((resolve) => {\n    let count = 20;\n\n    function task() {\n      if (--count > 0) {\n        if (\n          typeof hostWindow.terraWebConnectors !== 'undefined' &&\n          Array.isArray(hostWindow.terraWebConnectors) &&\n          hostWindow.terraWebConnectors.length > 0\n        ) {\n          console.log(\n            `TerraWebConnector: `,\n            JSON.stringify(hostWindow.terraWebConnectors[0].getInfo()),\n          );\n          resolve(hostWindow.terraWebConnectors[0]);\n        } else {\n          console.warn(`Can't find window.terraWebConnectors. wait 500ms...`);\n          setTimeout(task, 500);\n        }\n      } else {\n        resolve(undefined);\n      }\n    }\n\n    task();\n  });\n}\n\nexport class WebConnectorController {\n  private readonly _status: BehaviorSubject<WebConnectorStatus>;\n  private readonly _states: BehaviorSubject<WebConnectorStates | null>;\n  private _connector: TerraWebConnector | null = null;\n\n  constructor(private hostWindow: Window) {\n    this._status = new BehaviorSubject<WebConnectorStatus>({\n      type: WebConnectorStatusType.INITIALIZING,\n    });\n\n    this._states = new BehaviorSubject<WebConnectorStates | null>(null);\n\n    const browser = bowser.getParser(navigator.userAgent);\n\n    //@ts-ignore\n    getConnector(hostWindow).then((connector) => {\n      if (!connector) {\n        const name = browser.getBrowserName(true);\n\n        let installLink: string;\n\n        switch (name) {\n          case 'chrome':\n          case 'microsoft edge':\n            installLink = 'https://google.com/chrome';\n            break;\n          case 'firefox':\n            installLink = 'https://google.com/firefox';\n            break;\n          case 'safari':\n            installLink = 'https://google.com/safari';\n            break;\n          default:\n            installLink = 'https://google.com/chrome';\n            break;\n        }\n\n        this._status.next({\n          type: WebConnectorStatusType.NO_AVAILABLE,\n          isConnectorExists: false,\n          installLink,\n        });\n\n        return;\n      }\n\n      if (!connector.checkBrowserAvailability(navigator.userAgent)) {\n        this._status.next({\n          type: WebConnectorStatusType.NO_AVAILABLE,\n          isConnectorExists: true,\n          isSupportBrowser: false,\n        });\n\n        return;\n      }\n\n      connector.open(hostWindow, this._status, this._states);\n\n      this._connector = connector;\n    });\n  }\n\n  /**\n   * Refetch the clientsStates\n   *\n   * You don't need call this method in most cases.\n   * Normally, when the clientStates is changed, states() get the new clientStates.\n   *\n   * @example\n   * client.states()\n   *       .subscribe(states => {\n   *         // 2. will get new clientStates\n   *         console.log('Got new states', Date.now())\n   *       })\n   *\n   * function callback() {\n   *   // 1. refetch client states\n   *   client.refetchStates()\n   * }\n   */\n  refetchStates = () => {\n    this._connector?.refetchStates();\n  };\n\n  /**\n   * Request approval connection to the Extension. (Connect)\n   */\n  requestApproval = () => {\n    this._connector?.requestApproval();\n  };\n\n  status = () => {\n    return this._status.asObservable();\n  };\n\n  getLastStatus = () => {\n    return this._status.getValue();\n  };\n\n  /**\n   * Execute transaction\n   *\n   * @example\n   * client.post(terraAddress, tx: CreateTxOptions)\n   *       .subscribe({\n   *          next: (result: WebConnectorTxProgress | WebConnectorTxSucceed) => {\n   *            switch (result.status) {\n   *              case WebConnectorTxStatus.PROGRESS:\n   *                console.log('in progress', result.payload)\n   *                break;\n   *              case WebConnectorTxStatus.SUCCEED:\n   *                console.log('succeed', result.payload)\n   *                break;\n   *            }\n   *          },\n   *          error: (error) => {\n   *            if (error instanceof WebConnectorUserDenied) {\n   *              console.log('user denied')\n   *            } else if (error instanceof WebConnectorCreateTxFailed) {\n   *              console.log('create tx failed', error.message)\n   *            } else if (error instanceof WebConnectorTxFailed) {\n   *              console.log('tx failed', error.txhash, error.message, error.raw_message)\n   *            } else {\n   *              console.log('unspecified error', 'message' in error ? error.message : String(error))\n   *            }\n   *          }\n   *       })\n   *\n   * @description The stream will be\n   * TxProgress -> [...TxProgress] -> TxSucceed\n   *\n   * - Tx is Succeed : TxProgress -> [...TxProgress] -> TxSucceed\n   */\n  post = (\n    terraAddress: string,\n    tx: CreateTxOptions,\n  ): Observable<WebConnectorTxResult> => {\n    return this._connector!.post(terraAddress, tx);\n  };\n\n  /**\n   * Add CW20 Token to extension dashboard\n   */\n  addCW20Tokens = (chainID: string, ...tokenAddrs: string[]) => {\n    return this._connector!.addCW20Tokens(chainID, ...tokenAddrs);\n  };\n\n  hasCW20Tokens = (chainID: string, ...tokenAddrs: string[]) => {\n    return this._connector!.hasCW20Tokens(chainID, ...tokenAddrs);\n  };\n\n  /**\n   * @example\n   * client.states()\n   *       .subscribe(states => {\n   *         if (!states) {\n   *           console.log('client is still not ready')\n   *         } else {\n   *           console.log('current network is', states.network)\n   *           console.log('current wallets are', states.wallets)\n   *         }\n   *       })\n   */\n  states = () => {\n    return this._states.asObservable();\n  };\n\n  getLastStates = () => {\n    return this._states.getValue();\n  };\n\n  /**\n   * Destroy this client\n   *\n   * - Unsubscribe all RxJs Subjects (every Observables are stoped)\n   */\n  destroy = () => {\n    this._connector?.close();\n    this._connector = null;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}