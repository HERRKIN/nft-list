{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ChromeExtensionController } from '../modules/chrome-extension';\nexport function ExtensionNetworkOnlyWalletProvider({\n  children,\n  defaultNetwork\n}) {\n  const [controller] = useState(() => new ChromeExtensionController({\n    defaultNetwork,\n    enableWalletConnection: false,\n    dangerously__chromeExtensionCompatibleBrowserCheck: () => false\n  }));\n  const [network, setNetwork] = useState(defaultNetwork);\n  useEffect(() => {\n    const networkSubscription = controller.networkInfo().subscribe({\n      next: value => {\n        setNetwork(value);\n      }\n    });\n    return () => {\n      networkSubscription.unsubscribe();\n    };\n  }, [controller]);\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes: [],\n      availableInstallTypes: [],\n      status: WalletStatus.WALLET_NOT_CONNECTED,\n      network,\n      wallets: [],\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support post()`);\n      },\n      sign: () => {\n        throw new Error(`<ExtensionNetworkOnlyWalletProvider> does not support sign()`);\n      },\n      recheckStatus: controller.recheckStatus,\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      }\n    };\n  }, [controller.recheckStatus, network]);\n  return _jsx(WalletContext.Provider, Object.assign({\n    value: state\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"sources":["../../../../src/@terra-money/wallet-provider/react/ExtensionNetworkOnlyWalletProvider.tsx"],"names":[],"mappings":";AAAA,SAAiB,aAAjB,EAAgC,YAAhC,QAAoD,uBAApD;AAEA,SAA2B,SAA3B,EAAsC,OAAtC,EAA+C,QAA/C,QAA+D,OAA/D;AACA,SAAS,yBAAT,QAA0C,6BAA1C;AAOA,OAAM,SAAU,kCAAV,CAA6C;AACjD,EAAA,QADiD;AAEjD,EAAA;AAFiD,CAA7C,EAGoC;AACxC,QAAM,CAAC,UAAD,IAAe,QAAQ,CAC3B,MACE,IAAI,yBAAJ,CAA8B;AAC5B,IAAA,cAD4B;AAE5B,IAAA,sBAAsB,EAAE,KAFI;AAG5B,IAAA,kDAAkD,EAAE,MAAM;AAH9B,GAA9B,CAFyB,CAA7B;AASA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAc,cAAd,CAAtC;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,UAAM,mBAAmB,GAAG,UAAU,CAAC,WAAX,GAAyB,SAAzB,CAAmC;AAC7D,MAAA,IAAI,EAAG,KAAD,IAAU;AACd,QAAA,UAAU,CAAC,KAAD,CAAV;AACD;AAH4D,KAAnC,CAA5B;AAMA,WAAO,MAAK;AACV,MAAA,mBAAmB,CAAC,WAApB;AACD,KAFD;AAGD,GAVQ,EAUN,CAAC,UAAD,CAVM,CAAT;AAYA,QAAM,KAAK,GAAG,OAAO,CAAS,MAAK;AACjC,WAAO;AACL,MAAA,qBAAqB,EAAE,EADlB;AAEL,MAAA,qBAAqB,EAAE,EAFlB;AAGL,MAAA,MAAM,EAAE,YAAY,CAAC,oBAHhB;AAIL,MAAA,OAJK;AAKL,MAAA,OAAO,EAAE,EALJ;AAML,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OARI;AASL,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAXI;AAYL,MAAA,eAAe,EAAE,MAAK;AACpB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAdI;AAeL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAjBI;AAkBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CACJ,8DADI,CAAN;AAGD,OAtBI;AAuBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CACJ,8DADI,CAAN;AAGD,OA3BI;AA4BL,MAAA,aAAa,EAAE,UAAU,CAAC,aA5BrB;AA6BL,MAAA,kCAAkC,EAAE,MAAK;AACvC,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;AA/BI,KAAP;AAiCD,GAlCoB,EAkClB,CAAC,UAAU,CAAC,aAAZ,EAA2B,OAA3B,CAlCkB,CAArB;AAoCA,SACE,IAAA,CAAC,aAAa,CAAC,QAAf,EAAuB,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE;AAAR,GAAA,EAAa;AAAA,IAAA,QAAA,EAAG;AAAH,GAAb,CAAvB,EAA+C,KAAA,CAA/C,CADF;AAGD","sourcesContent":["import { Wallet, WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { NetworkInfo } from '@terra-dev/wallet-types';\nimport React, { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { ChromeExtensionController } from '../modules/chrome-extension';\n\nexport interface ExtensionNetworkOnlyWalletProviderProps {\n  children: ReactNode;\n  defaultNetwork: NetworkInfo;\n}\n\nexport function ExtensionNetworkOnlyWalletProvider({\n  children,\n  defaultNetwork,\n}: ExtensionNetworkOnlyWalletProviderProps) {\n  const [controller] = useState<ChromeExtensionController>(\n    () =>\n      new ChromeExtensionController({\n        defaultNetwork,\n        enableWalletConnection: false,\n        dangerously__chromeExtensionCompatibleBrowserCheck: () => false,\n      }),\n  );\n\n  const [network, setNetwork] = useState<NetworkInfo>(defaultNetwork);\n\n  useEffect(() => {\n    const networkSubscription = controller.networkInfo().subscribe({\n      next: (value) => {\n        setNetwork(value);\n      },\n    });\n\n    return () => {\n      networkSubscription.unsubscribe();\n    };\n  }, [controller]);\n\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes: [],\n      availableInstallTypes: [],\n      status: WalletStatus.WALLET_NOT_CONNECTED,\n      network,\n      wallets: [],\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error(\n          `<ExtensionNetworkOnlyWalletProvider> does not support post()`,\n        );\n      },\n      sign: () => {\n        throw new Error(\n          `<ExtensionNetworkOnlyWalletProvider> does not support sign()`,\n        );\n      },\n      recheckStatus: controller.recheckStatus,\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n    };\n  }, [controller.recheckStatus, network]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}