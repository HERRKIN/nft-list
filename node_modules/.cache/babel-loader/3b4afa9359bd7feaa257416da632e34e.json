{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { WalletContext, WalletStatus } from '@terra-dev/use-wallet';\nimport { useMemo } from 'react';\nexport function StaticWalletProvider({\n  children,\n  defaultNetwork,\n  status = WalletStatus.INITIALIZING,\n  availableConnectTypes = [],\n  availableInstallTypes = [],\n  wallets = []\n}) {\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      status,\n      network: defaultNetwork,\n      wallets,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      }\n    };\n  }, [availableConnectTypes, availableInstallTypes, defaultNetwork, status, wallets]);\n  return _jsx(WalletContext.Provider, Object.assign({\n    value: state\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"sources":["../../../../src/@terra-money/wallet-provider/react/StaticWalletProvider.tsx"],"names":[],"mappings":";AAAA,SAGE,aAHF,EAKE,YALF,QAMO,uBANP;AAQA,SAA2B,OAA3B,QAA0C,OAA1C;AAWA,OAAM,SAAU,oBAAV,CAA+B;AACnC,EAAA,QADmC;AAEnC,EAAA,cAFmC;AAGnC,EAAA,MAAM,GAAG,YAAY,CAAC,YAHa;AAInC,EAAA,qBAAqB,GAAG,EAJW;AAKnC,EAAA,qBAAqB,GAAG,EALW;AAMnC,EAAA,OAAO,GAAG;AANyB,CAA/B,EAOsB;AAC1B,QAAM,KAAK,GAAG,OAAO,CAAS,MAAK;AACjC,WAAO;AACL,MAAA,qBADK;AAEL,MAAA,qBAFK;AAGL,MAAA,MAHK;AAIL,MAAA,OAAO,EAAE,cAJJ;AAKL,MAAA,OALK;AAML,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OARI;AASL,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAXI;AAYL,MAAA,eAAe,EAAE,MAAK;AACpB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAdI;AAeL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAjBI;AAkBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OApBI;AAqBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAvBI;AAwBL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA1BI;AA2BL,MAAA,kCAAkC,EAAE,MAAK;AACvC,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;AA7BI,KAAP;AA+BD,GAhCoB,EAgClB,CACD,qBADC,EAED,qBAFC,EAGD,cAHC,EAID,MAJC,EAKD,OALC,CAhCkB,CAArB;AAwCA,SACE,IAAA,CAAC,aAAa,CAAC,QAAf,EAAuB,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE;AAAR,GAAA,EAAa;AAAA,IAAA,QAAA,EAAG;AAAH,GAAb,CAAvB,EAA+C,KAAA,CAA/C,CADF;AAGD","sourcesContent":["import {\n  ConnectType,\n  Wallet,\n  WalletContext,\n  WalletInfo,\n  WalletStatus,\n} from '@terra-dev/use-wallet';\nimport { NetworkInfo } from '@terra-dev/wallet-types';\nimport React, { ReactNode, useMemo } from 'react';\n\nexport interface StaticWalletProviderProps {\n  children: ReactNode;\n  defaultNetwork: NetworkInfo;\n  status?: WalletStatus;\n  availableConnectTypes?: ConnectType[];\n  availableInstallTypes?: ConnectType[];\n  wallets?: WalletInfo[];\n}\n\nexport function StaticWalletProvider({\n  children,\n  defaultNetwork,\n  status = WalletStatus.INITIALIZING,\n  availableConnectTypes = [],\n  availableInstallTypes = [],\n  wallets = [],\n}: StaticWalletProviderProps) {\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      status,\n      network: defaultNetwork,\n      wallets,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n    };\n  }, [\n    availableConnectTypes,\n    availableInstallTypes,\n    defaultNetwork,\n    status,\n    wallets,\n  ]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}