{"ast":null,"code":"var _jsxFileName = \"/Users/farouk/Documents/Work/DeviantsFactions/testchamber/nft-list/src/components/TxSample.tsx\",\n    _s = $RefreshSig$();\n\nimport { MsgSend, StdFee } from '@terra-money/terra.js';\nimport { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, useConnectedWallet, UserDenied } from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\nexport function TxSample() {\n  _s();\n\n  const [txResult, setTxResult] = useState(null);\n  const [txError, setTxError] = useState(null);\n  const connectedWallet = useConnectedWallet();\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setTxResult(null);\n    connectedWallet.post({\n      fee: new StdFee(1000000, '200000uusd'),\n      msgs: [new MsgSend(connectedWallet.walletAddress, toAddress, {\n        uusd: 1000000\n      })]\n    }).then(nextTxResult => {\n      console.log(nextTxResult);\n      setTxResult(nextTxResult);\n    }).catch(error => {\n      if (error instanceof UserDenied) {\n        setTxError('User Denied');\n      } else if (error instanceof CreateTxFailed) {\n        setTxError('Create Tx Failed: ' + error.message);\n      } else if (error instanceof TxFailed) {\n        setTxError('Tx Failed: ' + error.message);\n      } else if (error instanceof Timeout) {\n        setTxError('Timeout');\n      } else if (error instanceof TxUnspecifiedError) {\n        setTxError('Unspecified Error: ' + error.message);\n      } else {\n        setTxError('Unknown Error: ' + (error instanceof Error ? error.message : String(error)));\n      }\n    });\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tx Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.availablePost) && !txResult && !txError && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: send,\n      children: [\"Send 1USD to \", toAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), txResult && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(txResult, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTxResult(null),\n        children: \"Clear Tx Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), txError && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: txError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTxError(null),\n        children: \"Clear Tx Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !connectedWallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 28\n    }, this), connectedWallet && !connectedWallet.availablePost && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Can not post Tx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TxSample, \"L0MRZw8fRc+dlTLCfUGanDc7gzE=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = TxSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"TxSample\");","map":{"version":3,"sources":["/Users/farouk/Documents/Work/DeviantsFactions/testchamber/nft-list/src/components/TxSample.tsx"],"names":["MsgSend","StdFee","CreateTxFailed","Timeout","TxFailed","TxUnspecifiedError","useConnectedWallet","UserDenied","React","useCallback","useState","toAddress","TxSample","txResult","setTxResult","txError","setTxError","connectedWallet","send","network","chainID","startsWith","alert","post","fee","msgs","walletAddress","uusd","then","nextTxResult","console","log","catch","error","message","Error","String","availablePost","JSON","stringify"],"mappings":"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","sourcesContent":["import { MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function TxSample() {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setTxResult(null);\n\n    connectedWallet\n      .post({\n        fee: new StdFee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, toAddress, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextTxResult: TxResult) => {\n        console.log(nextTxResult);\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Tx Sample</h1>\n      {connectedWallet?.availablePost && !txResult && !txError && (\n        <button onClick={send}>Send 1USD to {toAddress}</button>\n      )}\n      {txResult && (\n        <>\n          <pre>{JSON.stringify(txResult, null, 2)}</pre>\n          <button onClick={() => setTxResult(null)}>Clear Tx Result</button>\n        </>\n      )}\n      {txError && (\n        <>\n          <pre>{txError}</pre>\n          <button onClick={() => setTxError(null)}>Clear Tx Error</button>\n        </>\n      )}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n      {connectedWallet && !connectedWallet.availablePost && (\n        <p>Can not post Tx</p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}