{"ast":null,"code":"var _jsxFileName = \"/Users/farouk/Documents/Work/DeviantsFactions/testchamber/nft-list/src/components/SignSample.tsx\",\n    _s = $RefreshSig$();\n\nimport { LCDClient, MsgSend, StdFee, StdSignature, StdSignMsg, StdTx } from '@terra-money/terra.js';\nimport { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, useConnectedWallet, UserDenied } from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\nexport function SignSample() {\n  _s();\n\n  const [signResult, setSignResult] = useState(null);\n  const [txResult, setTxResult] = useState(null);\n  const [txError, setTxError] = useState(null);\n  const connectedWallet = useConnectedWallet();\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setSignResult(null);\n    connectedWallet.sign({\n      fee: new StdFee(1000000, '200000uusd'),\n      msgs: [new MsgSend(connectedWallet.walletAddress, toAddress, {\n        uusd: 1000000\n      })]\n    }).then(nextSignResult => {\n      setSignResult(nextSignResult); // broadcast\n\n      const {\n        signature,\n        public_key,\n        stdSignMsgData\n      } = nextSignResult.result;\n      const sig = StdSignature.fromData({\n        signature,\n        pub_key: public_key\n      });\n      const stdSignMsg = StdSignMsg.fromData(stdSignMsgData);\n      const lcd = new LCDClient({\n        chainID: connectedWallet.network.chainID,\n        URL: connectedWallet.network.lcd\n      });\n      return lcd.tx.broadcastSync(new StdTx(stdSignMsg.msgs, stdSignMsg.fee, [sig], stdSignMsg.memo));\n    }).then(nextTxResult => {\n      setTxResult(nextTxResult);\n    }).catch(error => {\n      if (error instanceof UserDenied) {\n        setTxError('User Denied');\n      } else if (error instanceof CreateTxFailed) {\n        setTxError('Create Tx Failed: ' + error.message);\n      } else if (error instanceof TxFailed) {\n        setTxError('Tx Failed: ' + error.message);\n      } else if (error instanceof Timeout) {\n        setTxError('Timeout');\n      } else if (error instanceof TxUnspecifiedError) {\n        setTxError('Unspecified Error: ' + error.message);\n      } else {\n        setTxError('Unknown Error: ' + (error instanceof Error ? error.message : String(error)));\n      }\n    });\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign Sample\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), (connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.availableSign) && !signResult && !txError && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => send(),\n      children: [\"Send 1USD to \", toAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), signResult && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(signResult, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), txResult && /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(txResult, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 24\n      }, this), connectedWallet && txResult && /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.txhash}`,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: \"Open Tx Result in Terra Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSignResult(null),\n        children: \"Clear Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), txError && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: txError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTxError(null),\n        children: \"Clear Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !connectedWallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 28\n    }, this), connectedWallet && !connectedWallet.availableSign && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Can not sign Tx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignSample, \"IcN78H/qfT01EQb1/+EKX1o7DAo=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = SignSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignSample\");","map":{"version":3,"sources":["/Users/farouk/Documents/Work/DeviantsFactions/testchamber/nft-list/src/components/SignSample.tsx"],"names":["LCDClient","MsgSend","StdFee","StdSignature","StdSignMsg","StdTx","CreateTxFailed","Timeout","TxFailed","TxUnspecifiedError","useConnectedWallet","UserDenied","React","useCallback","useState","toAddress","SignSample","signResult","setSignResult","txResult","setTxResult","txError","setTxError","connectedWallet","send","network","chainID","startsWith","alert","sign","fee","msgs","walletAddress","uusd","then","nextSignResult","signature","public_key","stdSignMsgData","result","sig","fromData","pub_key","stdSignMsg","lcd","URL","tx","broadcastSync","memo","nextTxResult","catch","error","message","Error","String","availableSign","JSON","stringify","txhash"],"mappings":"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","sourcesContent":["import {\n  LCDClient,\n  MsgSend,\n  StdFee,\n  StdSignature,\n  StdSignMsg,\n  StdTx,\n  SyncTxBroadcastResult,\n} from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  SignResult,\n  Timeout,\n  TxFailed,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function SignSample() {\n  const [signResult, setSignResult] = useState<SignResult | null>(null);\n  const [txResult, setTxResult] = useState<SyncTxBroadcastResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setSignResult(null);\n\n    connectedWallet\n      .sign({\n        fee: new StdFee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, toAddress, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextSignResult: SignResult) => {\n        setSignResult(nextSignResult);\n\n        // broadcast\n        const { signature, public_key, stdSignMsgData } = nextSignResult.result;\n\n        const sig = StdSignature.fromData({\n          signature,\n          pub_key: public_key,\n        });\n\n        const stdSignMsg = StdSignMsg.fromData(stdSignMsgData);\n\n        const lcd = new LCDClient({\n          chainID: connectedWallet.network.chainID,\n          URL: connectedWallet.network.lcd,\n        });\n\n        return lcd.tx.broadcastSync(\n          new StdTx(stdSignMsg.msgs, stdSignMsg.fee, [sig], stdSignMsg.memo),\n        );\n      })\n      .then((nextTxResult: SyncTxBroadcastResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Sign Sample</h1>\n      {connectedWallet?.availableSign && !signResult && !txError && (\n        <button onClick={() => send()}>Send 1USD to {toAddress}</button>\n      )}\n      {signResult && (\n        <>\n          <pre>{JSON.stringify(signResult, null, 2)}</pre>\n          {txResult && <pre>{JSON.stringify(txResult, null, 2)}</pre>}\n          {connectedWallet && txResult && (\n            <a\n              href={`https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.txhash}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Open Tx Result in Terra Finder\n            </a>\n          )}\n          <button onClick={() => setSignResult(null)}>Clear Result</button>\n        </>\n      )}\n      {txError && (\n        <>\n          <pre>{txError}</pre>\n          <button onClick={() => setTxError(null)}>Clear Error</button>\n        </>\n      )}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n      {connectedWallet && !connectedWallet.availableSign && (\n        <p>Can not sign Tx</p>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}