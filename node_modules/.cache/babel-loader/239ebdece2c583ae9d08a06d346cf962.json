{"ast":null,"code":"import { isDesktopChrome } from '@terra-dev/browser-check';\nimport { readonlyWalletModal } from '@terra-dev/readonly-wallet-modal';\nimport { ConnectType, WalletStatus } from '@terra-dev/use-wallet';\nimport { CreateTxFailed, Timeout, TxFailed, TxUnspecifiedError, UserDenied } from '@terra-dev/wallet-types';\nimport { WebConnectorController } from '@terra-dev/web-connector-controller';\nimport { WebConnectorCreateTxFailed, WebConnectorStatusType, WebConnectorTxFailed, WebConnectorTxStatus, WebConnectorUserDenied } from '@terra-dev/web-connector-interface';\nimport { AccAddress } from '@terra-money/terra.js';\nimport deepEqual from 'fast-deep-equal';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CHROME_EXTENSION_INSTALL_URL, DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK, WEB_EXTENSION_CONNECTED_KEY } from './env';\nimport { ChromeExtensionController, ChromeExtensionCreateTxFailed, ChromeExtensionStatus, ChromeExtensionTxFailed, ChromeExtensionUnspecifiedError } from './modules/chrome-extension';\nimport { connect as reConnect, connectIfSessionExists as reConnectIfSessionExists } from './modules/readonly-wallet';\nimport { connect as wcConnect, connectIfSessionExists as wcConnectIfSessionExists, WalletConnectCreateTxFailed, WalletConnectSessionStatus, WalletConnectTimeout, WalletConnectTxFailed, WalletConnectTxUnspecifiedError, WalletConnectUserDenied } from './modules/walletconnect';\nimport { checkAvailableExtension } from './utils/checkAvailableExtension';\nconst defaultWaitingChromeExtensionInstallCheck = 1000 * 3;\nexport class WalletController {\n  constructor(options) {\n    var _a;\n\n    this.options = options;\n    this.chromeExtension = null;\n    this.webConnector = null;\n    this.walletConnect = null;\n    this.readonlyWallet = null;\n    this.disableReadonlyWallet = null;\n    this.disableChromeExtension = null;\n    this.disableWebExtension = null;\n    this.disableWalletConnect = null;\n    /** @see Wallet#isChromeExtensionCompatibleBrowser */\n\n    this.isChromeExtensionCompatibleBrowser = () => {\n      var _a;\n\n      return ((_a = this.options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK)(navigator.userAgent);\n    };\n    /** @see Wallet#availableConnectTypes */\n\n\n    this.availableConnectTypes = () => {\n      return this._availableConnectTypes.asObservable();\n    };\n    /** @see Wallet#availableInstallTypes */\n\n\n    this.availableInstallTypes = () => {\n      return this._availableInstallTypes.asObservable();\n    };\n    /**\n     * @see Wallet#status\n     * @see Wallet#network\n     * @see Wallet#wallets\n     */\n\n\n    this.states = () => {\n      return this._states.asObservable();\n    };\n    /** @deprecated please use `states()` */\n\n\n    this.status = () => {\n      return this._states.pipe(map(data => data.status));\n    };\n    /** @deprecated please use `states()` */\n\n\n    this.network = () => {\n      return this._states.pipe(map(data => data.network));\n    };\n    /** @deprecated please use `states()` */\n\n\n    this.wallets = () => {\n      return this._states.pipe(map(data => data.status === WalletStatus.WALLET_CONNECTED ? data.wallets : []));\n    };\n    /** @see Wallet#recheckStatus */\n\n\n    this.recheckStatus = () => {\n      var _a;\n\n      if (this.disableChromeExtension) {\n        (_a = this.chromeExtension) === null || _a === void 0 ? void 0 : _a.recheckStatus();\n      }\n    };\n    /** @see Wallet#install */\n\n\n    this.install = type => {\n      var _a;\n\n      if (type === ConnectType.CHROME_EXTENSION) {\n        window.open(CHROME_EXTENSION_INSTALL_URL, '_blank');\n      } else if (type === ConnectType.WEB_CONNECT) {\n        const webExtensionStatus = (_a = this.webConnector) === null || _a === void 0 ? void 0 : _a.getLastStatus();\n\n        if ((webExtensionStatus === null || webExtensionStatus === void 0 ? void 0 : webExtensionStatus.type) === WebConnectorStatusType.NO_AVAILABLE && webExtensionStatus.installLink) {\n          window.open(webExtensionStatus.installLink, '_blank');\n        }\n      } else {\n        console.warn(`ConnectType \"${type}\" does not support install() function`);\n      }\n    };\n    /** @see Wallet#connect */\n\n\n    this.connect = type => {\n      var _a, _b, _c;\n\n      switch (type) {\n        case ConnectType.READONLY:\n          const networks = Object.keys(this.options.walletConnectChainIds).map(chainId => this.options.walletConnectChainIds[+chainId]);\n          const createReadonlyWalletSession = (_c = (_b = (_a = this.options).createReadonlyWalletSession) === null || _b === void 0 ? void 0 : _b.call(_a, networks)) !== null && _c !== void 0 ? _c : readonlyWalletModal({\n            networks\n          });\n          createReadonlyWalletSession.then(readonlyWalletSession => {\n            if (readonlyWalletSession) {\n              this.enableReadonlyWallet(reConnect(readonlyWalletSession));\n            }\n          });\n          break;\n\n        case ConnectType.WALLETCONNECT:\n          this.enableWalletConnect(wcConnect(this.options));\n          break;\n\n        case ConnectType.CHROME_EXTENSION:\n          this.chromeExtension.connect().then(success => {\n            if (success) {\n              this.enableChromeExtension();\n            }\n          });\n          break;\n\n        case ConnectType.WEB_CONNECT:\n          this.enableWebExtension();\n          break;\n\n        default:\n          throw new Error(`Unknown ConnectType!`);\n      }\n    };\n    /** @see Wallet#connectReadonly */\n\n\n    this.connectReadonly = (terraAddress, network) => {\n      this.enableReadonlyWallet(reConnect({\n        terraAddress,\n        network\n      }));\n    };\n    /** @see Wallet#disconnect */\n\n\n    this.disconnect = () => {\n      var _a, _b, _c, _d;\n\n      (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);\n      this.disableReadonlyWallet = null;\n      (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);\n      this.disableChromeExtension = null;\n      (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);\n      this.disableWebExtension = null;\n      (_d = this.disableWalletConnect) === null || _d === void 0 ? void 0 : _d.call(this);\n      this.disableWalletConnect = null;\n      localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n      this.updateStates(this._notConnected);\n    };\n    /** @see Wallet#post */\n\n\n    this.post = async (tx, // TODO not work at this time. for the future extension\n    txTarget = {}) => {\n      // ---------------------------------------------\n      // chrome extension - legacy extension\n      // ---------------------------------------------\n      if (this.disableChromeExtension) {\n        if (!this.chromeExtension) {\n          throw new Error(`chromeExtension instance not created!`);\n        }\n\n        return this.chromeExtension // TODO make WalletConnectTxResult to common type\n        .post(tx).then(({\n          payload\n        }) => {\n          return { ...tx,\n            result: payload.result,\n            success: true\n          };\n        }).catch(error => {\n          if (error instanceof ChromeExtensionCreateTxFailed) {\n            throw new CreateTxFailed(tx, error.message);\n          } else if (error instanceof ChromeExtensionTxFailed) {\n            throw new TxFailed(tx, error.txhash, error.message, null);\n          } else if (error instanceof ChromeExtensionUnspecifiedError) {\n            throw new TxUnspecifiedError(tx, error.message);\n          } // UserDeniedError\n          // All unspecified errors...\n\n\n          throw error;\n        });\n      } // ---------------------------------------------\n      // web extension - new extension\n      // ---------------------------------------------\n      else if (this.disableWebExtension) {\n        return new Promise((resolve, reject) => {\n          var _a, _b;\n\n          if (!this.webConnector) {\n            reject(new Error(`webExtension instance not created!`));\n            return;\n          }\n\n          const webExtensionStates = this.webConnector.getLastStates();\n\n          if (!webExtensionStates) {\n            reject(new Error(`webExtension.getLastStates() returns undefined!`));\n            return;\n          }\n\n          const focusedWallet = txTarget.terraAddress ? (_a = webExtensionStates.wallets.find(itemWallet => itemWallet.terraAddress === txTarget.terraAddress)) !== null && _a !== void 0 ? _a : webExtensionStates.wallets[0] : webExtensionStates.focusedWalletAddress ? (_b = webExtensionStates.wallets.find(itemWallet => itemWallet.terraAddress === webExtensionStates.focusedWalletAddress)) !== null && _b !== void 0 ? _b : webExtensionStates.wallets[0] : webExtensionStates.wallets[0];\n          const subscription = this.webConnector.post(focusedWallet.terraAddress, tx).subscribe({\n            next: extensionTxResult => {\n              switch (extensionTxResult.status) {\n                case WebConnectorTxStatus.SUCCEED:\n                  resolve({ ...tx,\n                    result: extensionTxResult.payload,\n                    success: true\n                  });\n                  subscription.unsubscribe();\n                  break;\n              }\n            },\n            error: error => {\n              if (error instanceof WebConnectorUserDenied) {\n                reject(new UserDenied());\n              } else if (error instanceof WebConnectorCreateTxFailed) {\n                reject(new CreateTxFailed(tx, error.message));\n              } else if (error instanceof WebConnectorTxFailed) {\n                reject(new TxFailed(tx, error.txhash, error.message, error.raw_message));\n              } else {\n                reject(new TxUnspecifiedError(tx, 'message' in error ? error.message : String(error)));\n              }\n\n              subscription.unsubscribe();\n            }\n          });\n        });\n      } // ---------------------------------------------\n      // wallet connect\n      // ---------------------------------------------\n      else if (this.walletConnect) {\n        return this.walletConnect.post(tx).then(result => ({ ...tx,\n          result,\n          success: true\n        })).catch(error => {\n          let throwError = error;\n\n          try {\n            if (error instanceof WalletConnectUserDenied) {\n              throwError = new UserDenied();\n            } else if (error instanceof WalletConnectCreateTxFailed) {\n              throwError = new CreateTxFailed(tx, error.message);\n            } else if (error instanceof WalletConnectTxFailed) {\n              throwError = new TxFailed(tx, error.txhash, error.message, error.raw_message);\n            } else if (error instanceof WalletConnectTimeout) {\n              throwError = new Timeout(error.message);\n            } else if (error instanceof WalletConnectTxUnspecifiedError) {\n              throwError = new TxUnspecifiedError(tx, error.message);\n            }\n          } catch (_a) {\n            throwError = new TxUnspecifiedError(tx, 'message' in error ? error.message : String(error));\n          }\n\n          throw throwError;\n        });\n      } else {\n        throw new Error(`There are no connections that can be posting tx!`);\n      }\n    };\n    /** @see Wallet#sign */\n\n\n    this.sign = async (tx, // TODO not work at this time. for the future extension\n    txTarget = {}) => {\n      if (this.disableChromeExtension) {\n        if (!this.chromeExtension) {\n          throw new Error(`chromeExtension instance not created!`);\n        }\n\n        return this.chromeExtension.sign(tx).then(({\n          payload\n        }) => {\n          const publicKey = typeof payload.result.public_key === 'string' ? {\n            type: 'tendermint/PubKeySecp256k1',\n            value: payload.result.public_key\n          } : payload.result.public_key;\n          const signResult = { ...payload.result,\n            public_key: publicKey\n          };\n          return { ...tx,\n            result: signResult,\n            success: true\n          };\n        }).catch(error => {\n          if (error instanceof ChromeExtensionCreateTxFailed) {\n            throw new CreateTxFailed(tx, error.message);\n          } else if (error instanceof ChromeExtensionTxFailed) {\n            throw new TxFailed(tx, error.txhash, error.message, null);\n          } else if (error instanceof ChromeExtensionUnspecifiedError) {\n            throw new TxUnspecifiedError(tx, error.message);\n          } // UserDenied - chrome extension will sent original UserDenied error type\n          // All unspecified errors...\n\n\n          throw error;\n        });\n      }\n\n      throw new Error(`sign() method only available on chrome extension`); // TODO implements sign() to other connect types\n    }; // ================================================================\n    // internal\n    // connect type changing\n    // ================================================================\n\n\n    this.updateStates = next => {\n      const prev = this._states.getValue();\n\n      if (next.status === WalletStatus.WALLET_CONNECTED && next.wallets.length === 0) {\n        console.trace('???');\n      }\n\n      if (prev.status !== next.status || !deepEqual(prev, next)) {\n        this._states.next(next);\n      }\n    };\n\n    this.enableReadonlyWallet = readonlyWallet => {\n      var _a, _b, _c, _d;\n\n      (_a = this.disableWalletConnect) === null || _a === void 0 ? void 0 : _a.call(this);\n      (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);\n      (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);\n\n      if (this.readonlyWallet === readonlyWallet || ((_d = this.readonlyWallet) === null || _d === void 0 ? void 0 : _d.terraAddress) === readonlyWallet.terraAddress && this.readonlyWallet.network === readonlyWallet.network) {\n        return;\n      }\n\n      if (this.readonlyWallet) {\n        this.readonlyWallet.disconnect();\n      }\n\n      this.readonlyWallet = readonlyWallet;\n      this.updateStates({\n        status: WalletStatus.WALLET_CONNECTED,\n        network: readonlyWallet.network,\n        wallets: [{\n          connectType: ConnectType.READONLY,\n          terraAddress: readonlyWallet.terraAddress,\n          design: 'readonly'\n        }]\n      });\n\n      this.disableReadonlyWallet = () => {\n        readonlyWallet.disconnect();\n        this.readonlyWallet = null;\n        this.disableReadonlyWallet = null;\n      };\n    };\n\n    this.enableWebExtension = () => {\n      var _a, _b, _c;\n\n      (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);\n      (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);\n      (_c = this.disableChromeExtension) === null || _c === void 0 ? void 0 : _c.call(this);\n\n      if (this.disableWebExtension || !this.webConnector) {\n        return;\n      }\n\n      const extensionSubscription = combineLatest([this.webConnector.status(), this.webConnector.states()]).subscribe(([status, states]) => {\n        var _a;\n\n        if (!states) {\n          return;\n        }\n\n        if (status.type === WebConnectorStatusType.READY) {\n          if (states.wallets.length > 0) {\n            const focusedWallet = states.focusedWalletAddress ? (_a = states.wallets.find(itemWallet => itemWallet.terraAddress === states.focusedWalletAddress)) !== null && _a !== void 0 ? _a : states.wallets[0] : states.wallets[0];\n            this.updateStates({\n              status: WalletStatus.WALLET_CONNECTED,\n              network: states.network,\n              wallets: [{\n                connectType: ConnectType.WEB_CONNECT,\n                terraAddress: focusedWallet.terraAddress,\n                design: focusedWallet.design\n              }]\n            });\n          }\n        } else if (status.type === WebConnectorStatusType.NO_AVAILABLE) {\n          localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n          this.updateStates(this._notConnected);\n\n          if (!status.isApproved && this.disableWebExtension) {\n            this.disableWebExtension();\n          }\n        }\n      });\n      localStorage.setItem(WEB_EXTENSION_CONNECTED_KEY, 'true');\n      const lastExtensionStatus = this.webConnector.getLastStatus();\n\n      if (lastExtensionStatus.type === WebConnectorStatusType.NO_AVAILABLE && lastExtensionStatus.isApproved === false) {\n        this.webConnector.requestApproval();\n      }\n\n      this.disableWebExtension = () => {\n        localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n        extensionSubscription.unsubscribe();\n        this.disableWebExtension = null;\n      };\n    };\n\n    this.enableChromeExtension = () => {\n      var _a, _b, _c;\n\n      (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);\n      (_b = this.disableWalletConnect) === null || _b === void 0 ? void 0 : _b.call(this);\n      (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);\n\n      if (this.disableChromeExtension || !this.chromeExtension) {\n        return;\n      }\n\n      const extensionSubscription = combineLatest([this.chromeExtension.status(), this.chromeExtension.networkInfo(), this.chromeExtension.terraAddress()]).subscribe({\n        next: ([status, networkInfo, terraAddress]) => {\n          if (status === ChromeExtensionStatus.WALLET_CONNECTED && typeof terraAddress === 'string' && AccAddress.validate(terraAddress)) {\n            this.updateStates({\n              status: WalletStatus.WALLET_CONNECTED,\n              network: networkInfo,\n              wallets: [{\n                connectType: ConnectType.CHROME_EXTENSION,\n                terraAddress,\n                design: 'extension'\n              }]\n            });\n          } else {\n            this.updateStates(this._notConnected);\n          }\n        }\n      });\n\n      this.disableChromeExtension = () => {\n        var _a;\n\n        (_a = this.chromeExtension) === null || _a === void 0 ? void 0 : _a.disconnect();\n        extensionSubscription.unsubscribe();\n        this.disableChromeExtension = null;\n      };\n    };\n\n    this.enableWalletConnect = walletConnect => {\n      var _a, _b, _c;\n\n      (_a = this.disableReadonlyWallet) === null || _a === void 0 ? void 0 : _a.call(this);\n      (_b = this.disableChromeExtension) === null || _b === void 0 ? void 0 : _b.call(this);\n      (_c = this.disableWebExtension) === null || _c === void 0 ? void 0 : _c.call(this);\n\n      if (this.walletConnect === walletConnect) {\n        return;\n      }\n\n      if (this.walletConnect) {\n        this.walletConnect.disconnect();\n      }\n\n      this.walletConnect = walletConnect;\n\n      const subscribeWalletConnect = wc => {\n        return wc.session().subscribe({\n          next: status => {\n            var _a;\n\n            switch (status.status) {\n              case WalletConnectSessionStatus.CONNECTED:\n                this.updateStates({\n                  status: WalletStatus.WALLET_CONNECTED,\n                  network: (_a = this.options.walletConnectChainIds[status.chainId]) !== null && _a !== void 0 ? _a : this.options.defaultNetwork,\n                  wallets: [{\n                    connectType: ConnectType.WALLETCONNECT,\n                    terraAddress: status.terraAddress,\n                    design: 'walletconnect'\n                  }]\n                });\n                break;\n\n              default:\n                this.updateStates(this._notConnected);\n                break;\n            }\n          }\n        });\n      };\n\n      const walletConnectSessionSubscription = subscribeWalletConnect(walletConnect);\n\n      this.disableWalletConnect = () => {\n        var _a;\n\n        (_a = this.walletConnect) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this.walletConnect = null;\n        walletConnectSessionSubscription.unsubscribe();\n        this.disableWalletConnect = null;\n      };\n    };\n\n    this._notConnected = {\n      status: WalletStatus.WALLET_NOT_CONNECTED,\n      network: options.defaultNetwork\n    };\n    this._initializing = {\n      status: WalletStatus.INITIALIZING,\n      network: options.defaultNetwork\n    };\n    this._availableConnectTypes = new BehaviorSubject([ConnectType.READONLY, ConnectType.WALLETCONNECT]);\n    this._availableInstallTypes = new BehaviorSubject([]);\n    this._states = new BehaviorSubject(this._initializing);\n    let numSessionCheck = 0; // wait checking the availability of the chrome extension\n    // 0. check if extension wallet session is exists\n\n    checkAvailableExtension((_a = options.waitingChromeExtensionInstallCheck) !== null && _a !== void 0 ? _a : defaultWaitingChromeExtensionInstallCheck, this.isChromeExtensionCompatibleBrowser()).then(extensionType => {\n      var _a;\n\n      if (extensionType === ConnectType.WEB_CONNECT) {\n        this._availableConnectTypes.next([ConnectType.READONLY, ConnectType.WEB_CONNECT, ConnectType.WALLETCONNECT]);\n\n        this.webConnector = new WebConnectorController(window);\n        const subscription = this.webConnector.status().pipe(filter(webExtensionStatus => {\n          return webExtensionStatus.type !== WebConnectorStatusType.INITIALIZING;\n        })).subscribe(webExtensionStatus => {\n          subscription.unsubscribe();\n\n          if (webExtensionStatus.type === WebConnectorStatusType.READY && localStorage.getItem(WEB_EXTENSION_CONNECTED_KEY) === 'true' && !this.disableWalletConnect && !this.disableReadonlyWallet) {\n            this.enableWebExtension();\n          } else if (numSessionCheck === 0) {\n            numSessionCheck += 1;\n          } else {\n            this.updateStates(this._notConnected);\n            localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n          }\n        });\n      } else if (extensionType === ConnectType.CHROME_EXTENSION) {\n        this._availableConnectTypes.next([ConnectType.READONLY, ConnectType.CHROME_EXTENSION, ConnectType.WALLETCONNECT]);\n\n        this.chromeExtension = new ChromeExtensionController({\n          enableWalletConnection: true,\n          defaultNetwork: options.defaultNetwork,\n          dangerously__chromeExtensionCompatibleBrowserCheck: (_a = options.dangerously__chromeExtensionCompatibleBrowserCheck) !== null && _a !== void 0 ? _a : DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK\n        });\n        const subscription = this.chromeExtension.status().pipe(filter(chromeExtensionStatus => {\n          return chromeExtensionStatus !== ChromeExtensionStatus.INITIALIZING;\n        })).subscribe(chromeExtensionStatus => {\n          try {\n            subscription.unsubscribe();\n          } catch (_a) {}\n\n          if (chromeExtensionStatus === ChromeExtensionStatus.WALLET_CONNECTED && !this.disableWalletConnect && !this.disableReadonlyWallet) {\n            this.enableChromeExtension();\n          } else if (numSessionCheck === 0) {\n            numSessionCheck += 1;\n          } else {\n            this.updateStates(this._notConnected);\n          }\n        });\n      } else {\n        if (isDesktopChrome(this.isChromeExtensionCompatibleBrowser())) {\n          this._availableInstallTypes.next([ConnectType.CHROME_EXTENSION]);\n        }\n\n        if (numSessionCheck === 0) {\n          numSessionCheck += 1;\n        } else {\n          this.updateStates(this._notConnected);\n        }\n      }\n    }); // 1. check if readonly wallet session is exists\n\n    const draftReadonlyWallet = reConnectIfSessionExists();\n\n    if (draftReadonlyWallet) {\n      this.enableReadonlyWallet(draftReadonlyWallet);\n      return;\n    } // 2. check if walletconnect sesison is exists\n\n\n    const draftWalletConnect = wcConnectIfSessionExists(options);\n\n    if (draftWalletConnect && draftWalletConnect.getLatestSession().status === WalletConnectSessionStatus.CONNECTED) {\n      this.enableWalletConnect(draftWalletConnect);\n    } else if (numSessionCheck === 0) {\n      numSessionCheck += 1;\n    } else {\n      this.updateStates(this._notConnected);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/@terra-money/wallet-provider/controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDesktopChrome } from '@terra-dev/browser-check';\nimport { readonlyWalletModal } from '@terra-dev/readonly-wallet-modal';\nimport {\n  ConnectType,\n  TxResult,\n  WalletInfo,\n  WalletStates,\n  WalletStatus,\n} from '@terra-dev/use-wallet';\nimport {\n  CreateTxFailed,\n  NetworkInfo,\n  SignResult,\n  Timeout,\n  TxFailed,\n  TxUnspecifiedError,\n  UserDenied,\n} from '@terra-dev/wallet-types';\nimport { WebConnectorController } from '@terra-dev/web-connector-controller';\nimport {\n  WebConnectorCreateTxFailed,\n  WebConnectorStatusType,\n  WebConnectorTxFailed,\n  WebConnectorTxResult,\n  WebConnectorTxStatus,\n  WebConnectorUserDenied,\n} from '@terra-dev/web-connector-interface';\nimport {\n  AccAddress,\n  CreateTxOptions,\n  PublicKey,\n  StdSignMsg,\n} from '@terra-money/terra.js';\nimport deepEqual from 'fast-deep-equal';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport {\n  CHROME_EXTENSION_INSTALL_URL,\n  DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK,\n  WEB_EXTENSION_CONNECTED_KEY,\n} from './env';\nimport {\n  ChromeExtensionController,\n  ChromeExtensionCreateTxFailed,\n  ChromeExtensionStatus,\n  ChromeExtensionTxFailed,\n  ChromeExtensionUnspecifiedError,\n} from './modules/chrome-extension';\nimport {\n  connect as reConnect,\n  connectIfSessionExists as reConnectIfSessionExists,\n  ReadonlyWalletController,\n  ReadonlyWalletSession,\n} from './modules/readonly-wallet';\nimport {\n  connect as wcConnect,\n  connectIfSessionExists as wcConnectIfSessionExists,\n  WalletConnectController,\n  WalletConnectControllerOptions,\n  WalletConnectCreateTxFailed,\n  WalletConnectSessionStatus,\n  WalletConnectTimeout,\n  WalletConnectTxFailed,\n  WalletConnectTxResult,\n  WalletConnectTxUnspecifiedError,\n  WalletConnectUserDenied,\n} from './modules/walletconnect';\nimport { checkAvailableExtension } from './utils/checkAvailableExtension';\n\nexport interface WalletControllerOptions\n  extends WalletConnectControllerOptions {\n  /**\n   * ⚠️ Don't hardcoding this, use getChain Options()\n   *\n   * fallback network if controller is not connected\n   */\n  defaultNetwork: NetworkInfo;\n\n  /**\n   * ⚠️ Don't hardcoding this, use getChain Options()\n   *\n   * for walletconnect\n   *\n   * The network rules passed by the Terra Station Mobile are 0 is testnet, 1 is mainnet.\n   *\n   * Always set testnet for 0 and mainnet for 1.\n   *\n   * @example\n   * ```\n   * const mainnet: NetworkInfo = {\n   *  name: 'mainnet',\n   *  chainID: 'columbus-5',\n   *  lcd: 'https://lcd.terra.dev',\n   * }\n   *\n   * const testnet: NetworkInfo = {\n   *  name: 'testnet',\n   *  chainID: 'bombay-12',\n   *  lcd: 'https://bombay-lcd.terra.dev',\n   * }\n   *\n   * const walletConnectChainIds: Record<number, NetworkInfo> = {\n   *   0: testnet,\n   *   1: mainnet,\n   * }\n   *\n   * <WalletProvider walletConnectChainIds={walletConnectChainIds}>\n   * ```\n   */\n  walletConnectChainIds: Record<number, NetworkInfo>;\n\n  /**\n   * run at executing the `connect(ConnectType.READONLY)`\n   */\n  createReadonlyWalletSession?: (\n    networks: NetworkInfo[],\n  ) => Promise<ReadonlyWalletSession | null>;\n\n  /**\n   * milliseconds to wait checking chrome extension is installed\n   *\n   * @default 1000 * 3 miliseconds\n   */\n  waitingChromeExtensionInstallCheck?: number;\n\n  /**\n   * ⚠️ This API is an option for wallet developers. Please don't use dApp developers.\n   *\n   * @example\n   * ```\n   * <WalletProvider dangerously__chromeExtensionCompatibleBrowserCheck={(userAgent: string) => {\n   *   return /MyWallet\\//.test(userAgent);\n   * }}>\n   * ```\n   */\n  dangerously__chromeExtensionCompatibleBrowserCheck?: (\n    userAgent: string,\n  ) => boolean;\n}\n\nconst defaultWaitingChromeExtensionInstallCheck = 1000 * 3;\n\nexport class WalletController {\n  private chromeExtension: ChromeExtensionController | null = null;\n  private webConnector: WebConnectorController | null = null;\n  private walletConnect: WalletConnectController | null = null;\n  private readonlyWallet: ReadonlyWalletController | null = null;\n\n  private _availableConnectTypes: BehaviorSubject<ConnectType[]>;\n  private _availableInstallTypes: BehaviorSubject<ConnectType[]>;\n  private _states: BehaviorSubject<WalletStates>;\n\n  private disableReadonlyWallet: (() => void) | null = null;\n  private disableChromeExtension: (() => void) | null = null;\n  private disableWebExtension: (() => void) | null = null;\n  private disableWalletConnect: (() => void) | null = null;\n\n  private readonly _notConnected: WalletStates;\n  private readonly _initializing: WalletStates;\n\n  constructor(readonly options: WalletControllerOptions) {\n    this._notConnected = {\n      status: WalletStatus.WALLET_NOT_CONNECTED,\n      network: options.defaultNetwork,\n    };\n\n    this._initializing = {\n      status: WalletStatus.INITIALIZING,\n      network: options.defaultNetwork,\n    };\n\n    this._availableConnectTypes = new BehaviorSubject<ConnectType[]>([\n      ConnectType.READONLY,\n      ConnectType.WALLETCONNECT,\n    ]);\n\n    this._availableInstallTypes = new BehaviorSubject<ConnectType[]>([]);\n\n    this._states = new BehaviorSubject<WalletStates>(this._initializing);\n\n    let numSessionCheck: number = 0;\n\n    // wait checking the availability of the chrome extension\n    // 0. check if extension wallet session is exists\n    checkAvailableExtension(\n      options.waitingChromeExtensionInstallCheck ??\n        defaultWaitingChromeExtensionInstallCheck,\n      this.isChromeExtensionCompatibleBrowser(),\n    ).then((extensionType) => {\n      if (extensionType === ConnectType.WEB_CONNECT) {\n        this._availableConnectTypes.next([\n          ConnectType.READONLY,\n          ConnectType.WEB_CONNECT,\n          ConnectType.WALLETCONNECT,\n        ]);\n\n        this.webConnector = new WebConnectorController(window);\n\n        const subscription = this.webConnector\n          .status()\n          .pipe(\n            filter((webExtensionStatus) => {\n              return (\n                webExtensionStatus.type !== WebConnectorStatusType.INITIALIZING\n              );\n            }),\n          )\n          .subscribe((webExtensionStatus) => {\n            subscription.unsubscribe();\n\n            if (\n              webExtensionStatus.type === WebConnectorStatusType.READY &&\n              localStorage.getItem(WEB_EXTENSION_CONNECTED_KEY) === 'true' &&\n              !this.disableWalletConnect &&\n              !this.disableReadonlyWallet\n            ) {\n              this.enableWebExtension();\n            } else if (numSessionCheck === 0) {\n              numSessionCheck += 1;\n            } else {\n              this.updateStates(this._notConnected);\n              localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n            }\n          });\n      } else if (extensionType === ConnectType.CHROME_EXTENSION) {\n        this._availableConnectTypes.next([\n          ConnectType.READONLY,\n          ConnectType.CHROME_EXTENSION,\n          ConnectType.WALLETCONNECT,\n        ]);\n\n        this.chromeExtension = new ChromeExtensionController({\n          enableWalletConnection: true,\n          defaultNetwork: options.defaultNetwork,\n          dangerously__chromeExtensionCompatibleBrowserCheck:\n            options.dangerously__chromeExtensionCompatibleBrowserCheck ??\n            DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK,\n        });\n\n        const subscription = this.chromeExtension\n          .status()\n          .pipe(\n            filter((chromeExtensionStatus) => {\n              return (\n                chromeExtensionStatus !== ChromeExtensionStatus.INITIALIZING\n              );\n            }),\n          )\n          .subscribe((chromeExtensionStatus) => {\n            try {\n              subscription.unsubscribe();\n            } catch {}\n\n            if (\n              chromeExtensionStatus ===\n                ChromeExtensionStatus.WALLET_CONNECTED &&\n              !this.disableWalletConnect &&\n              !this.disableReadonlyWallet\n            ) {\n              this.enableChromeExtension();\n            } else if (numSessionCheck === 0) {\n              numSessionCheck += 1;\n            } else {\n              this.updateStates(this._notConnected);\n            }\n          });\n      } else {\n        if (isDesktopChrome(this.isChromeExtensionCompatibleBrowser())) {\n          this._availableInstallTypes.next([ConnectType.CHROME_EXTENSION]);\n        }\n\n        if (numSessionCheck === 0) {\n          numSessionCheck += 1;\n        } else {\n          this.updateStates(this._notConnected);\n        }\n      }\n    });\n\n    // 1. check if readonly wallet session is exists\n    const draftReadonlyWallet = reConnectIfSessionExists();\n\n    if (draftReadonlyWallet) {\n      this.enableReadonlyWallet(draftReadonlyWallet);\n      return;\n    }\n\n    // 2. check if walletconnect sesison is exists\n    const draftWalletConnect = wcConnectIfSessionExists(options);\n\n    if (\n      draftWalletConnect &&\n      draftWalletConnect.getLatestSession().status ===\n        WalletConnectSessionStatus.CONNECTED\n    ) {\n      this.enableWalletConnect(draftWalletConnect);\n    } else if (numSessionCheck === 0) {\n      numSessionCheck += 1;\n    } else {\n      this.updateStates(this._notConnected);\n    }\n  }\n\n  /** @see Wallet#isChromeExtensionCompatibleBrowser */\n  isChromeExtensionCompatibleBrowser = (): boolean => {\n    return (\n      this.options.dangerously__chromeExtensionCompatibleBrowserCheck ??\n      DEFAULT_CHROME_EXTENSION_COMPATIBLE_BROWSER_CHECK\n    )(navigator.userAgent);\n  };\n\n  /** @see Wallet#availableConnectTypes */\n  availableConnectTypes = (): Observable<ConnectType[]> => {\n    return this._availableConnectTypes.asObservable();\n  };\n\n  /** @see Wallet#availableInstallTypes */\n  availableInstallTypes = (): Observable<ConnectType[]> => {\n    return this._availableInstallTypes.asObservable();\n  };\n\n  /**\n   * @see Wallet#status\n   * @see Wallet#network\n   * @see Wallet#wallets\n   */\n  states = (): Observable<WalletStates> => {\n    return this._states.asObservable();\n  };\n\n  /** @deprecated please use `states()` */\n  status = (): Observable<WalletStatus> => {\n    return this._states.pipe(map((data) => data.status));\n  };\n\n  /** @deprecated please use `states()` */\n  network = (): Observable<NetworkInfo> => {\n    return this._states.pipe(map((data) => data.network));\n  };\n\n  /** @deprecated please use `states()` */\n  wallets = (): Observable<WalletInfo[]> => {\n    return this._states.pipe(\n      map((data) =>\n        data.status === WalletStatus.WALLET_CONNECTED ? data.wallets : [],\n      ),\n    );\n  };\n\n  /** @see Wallet#recheckStatus */\n  recheckStatus = () => {\n    if (this.disableChromeExtension) {\n      this.chromeExtension?.recheckStatus();\n    }\n  };\n\n  /** @see Wallet#install */\n  install = (type: ConnectType) => {\n    if (type === ConnectType.CHROME_EXTENSION) {\n      window.open(CHROME_EXTENSION_INSTALL_URL, '_blank');\n    } else if (type === ConnectType.WEB_CONNECT) {\n      const webExtensionStatus = this.webConnector?.getLastStatus();\n      if (\n        webExtensionStatus?.type === WebConnectorStatusType.NO_AVAILABLE &&\n        webExtensionStatus.installLink\n      ) {\n        window.open(webExtensionStatus.installLink, '_blank');\n      }\n    } else {\n      console.warn(`ConnectType \"${type}\" does not support install() function`);\n    }\n  };\n\n  /** @see Wallet#connect */\n  connect = (type: ConnectType) => {\n    switch (type) {\n      case ConnectType.READONLY:\n        const networks: NetworkInfo[] = Object.keys(\n          this.options.walletConnectChainIds,\n        ).map((chainId) => this.options.walletConnectChainIds[+chainId]);\n\n        const createReadonlyWalletSession =\n          this.options.createReadonlyWalletSession?.(networks) ??\n          readonlyWalletModal({ networks });\n\n        createReadonlyWalletSession.then((readonlyWalletSession) => {\n          if (readonlyWalletSession) {\n            this.enableReadonlyWallet(reConnect(readonlyWalletSession));\n          }\n        });\n        break;\n      case ConnectType.WALLETCONNECT:\n        this.enableWalletConnect(wcConnect(this.options));\n        break;\n      case ConnectType.CHROME_EXTENSION:\n        this.chromeExtension!.connect().then((success) => {\n          if (success) {\n            this.enableChromeExtension();\n          }\n        });\n        break;\n      case ConnectType.WEB_CONNECT:\n        this.enableWebExtension();\n        break;\n      default:\n        throw new Error(`Unknown ConnectType!`);\n    }\n  };\n\n  /** @see Wallet#connectReadonly */\n  connectReadonly = (terraAddress: string, network: NetworkInfo) => {\n    this.enableReadonlyWallet(\n      reConnect({\n        terraAddress,\n        network,\n      }),\n    );\n  };\n\n  /** @see Wallet#disconnect */\n  disconnect = () => {\n    this.disableReadonlyWallet?.();\n    this.disableReadonlyWallet = null;\n\n    this.disableChromeExtension?.();\n    this.disableChromeExtension = null;\n\n    this.disableWebExtension?.();\n    this.disableWebExtension = null;\n\n    this.disableWalletConnect?.();\n    this.disableWalletConnect = null;\n\n    localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n    this.updateStates(this._notConnected);\n  };\n\n  /** @see Wallet#post */\n  post = async (\n    tx: CreateTxOptions,\n    // TODO not work at this time. for the future extension\n    txTarget: { terraAddress?: string } = {},\n  ): Promise<TxResult> => {\n    // ---------------------------------------------\n    // chrome extension - legacy extension\n    // ---------------------------------------------\n    if (this.disableChromeExtension) {\n      if (!this.chromeExtension) {\n        throw new Error(`chromeExtension instance not created!`);\n      }\n\n      return (\n        this.chromeExtension\n          // TODO make WalletConnectTxResult to common type\n          .post<CreateTxOptions, { result: WalletConnectTxResult }>(tx)\n          .then(({ payload }) => {\n            return {\n              ...tx,\n              result: payload.result,\n              success: true,\n            } as TxResult;\n          })\n          .catch((error) => {\n            if (error instanceof ChromeExtensionCreateTxFailed) {\n              throw new CreateTxFailed(tx, error.message);\n            } else if (error instanceof ChromeExtensionTxFailed) {\n              throw new TxFailed(tx, error.txhash, error.message, null);\n            } else if (error instanceof ChromeExtensionUnspecifiedError) {\n              throw new TxUnspecifiedError(tx, error.message);\n            }\n            // UserDeniedError\n            // All unspecified errors...\n            throw error;\n          })\n      );\n    }\n    // ---------------------------------------------\n    // web extension - new extension\n    // ---------------------------------------------\n    else if (this.disableWebExtension) {\n      return new Promise<TxResult>((resolve, reject) => {\n        if (!this.webConnector) {\n          reject(new Error(`webExtension instance not created!`));\n          return;\n        }\n\n        const webExtensionStates = this.webConnector.getLastStates();\n\n        if (!webExtensionStates) {\n          reject(new Error(`webExtension.getLastStates() returns undefined!`));\n          return;\n        }\n\n        const focusedWallet = txTarget.terraAddress\n          ? webExtensionStates.wallets.find(\n              (itemWallet) => itemWallet.terraAddress === txTarget.terraAddress,\n            ) ?? webExtensionStates.wallets[0]\n          : webExtensionStates.focusedWalletAddress\n          ? webExtensionStates.wallets.find(\n              (itemWallet) =>\n                itemWallet.terraAddress ===\n                webExtensionStates.focusedWalletAddress,\n            ) ?? webExtensionStates.wallets[0]\n          : webExtensionStates.wallets[0];\n\n        const subscription = this.webConnector\n          .post(focusedWallet.terraAddress, tx)\n          .subscribe({\n            next: (extensionTxResult: WebConnectorTxResult) => {\n              switch (extensionTxResult.status) {\n                case WebConnectorTxStatus.SUCCEED:\n                  resolve({\n                    ...tx,\n                    result: extensionTxResult.payload,\n                    success: true,\n                  });\n                  subscription.unsubscribe();\n                  break;\n              }\n            },\n            error: (error) => {\n              if (error instanceof WebConnectorUserDenied) {\n                reject(new UserDenied());\n              } else if (error instanceof WebConnectorCreateTxFailed) {\n                reject(new CreateTxFailed(tx, error.message));\n              } else if (error instanceof WebConnectorTxFailed) {\n                reject(\n                  new TxFailed(\n                    tx,\n                    error.txhash,\n                    error.message,\n                    error.raw_message,\n                  ),\n                );\n              } else {\n                reject(\n                  new TxUnspecifiedError(\n                    tx,\n                    'message' in error ? error.message : String(error),\n                  ),\n                );\n              }\n              subscription.unsubscribe();\n            },\n          });\n      });\n    }\n    // ---------------------------------------------\n    // wallet connect\n    // ---------------------------------------------\n    else if (this.walletConnect) {\n      return this.walletConnect\n        .post(tx)\n        .then(\n          (result) =>\n            ({\n              ...tx,\n              result,\n              success: true,\n            } as TxResult),\n        )\n        .catch((error) => {\n          let throwError = error;\n\n          try {\n            if (error instanceof WalletConnectUserDenied) {\n              throwError = new UserDenied();\n            } else if (error instanceof WalletConnectCreateTxFailed) {\n              throwError = new CreateTxFailed(tx, error.message);\n            } else if (error instanceof WalletConnectTxFailed) {\n              throwError = new TxFailed(\n                tx,\n                error.txhash,\n                error.message,\n                error.raw_message,\n              );\n            } else if (error instanceof WalletConnectTimeout) {\n              throwError = new Timeout(error.message);\n            } else if (error instanceof WalletConnectTxUnspecifiedError) {\n              throwError = new TxUnspecifiedError(tx, error.message);\n            }\n          } catch {\n            throwError = new TxUnspecifiedError(\n              tx,\n              'message' in error ? error.message : String(error),\n            );\n          }\n\n          throw throwError;\n        });\n    } else {\n      throw new Error(`There are no connections that can be posting tx!`);\n    }\n  };\n\n  /** @see Wallet#sign */\n  sign = async (\n    tx: CreateTxOptions,\n    // TODO not work at this time. for the future extension\n    txTarget: { terraAddress?: string } = {},\n  ): Promise<SignResult> => {\n    interface SignResultRaw extends CreateTxOptions {\n      result: {\n        public_key: string | PublicKey.Data;\n        recid: number;\n        signature: string;\n        stdSignMsgData: StdSignMsg.Data;\n      };\n      success: boolean;\n    }\n\n    if (this.disableChromeExtension) {\n      if (!this.chromeExtension) {\n        throw new Error(`chromeExtension instance not created!`);\n      }\n\n      return this.chromeExtension\n        .sign<CreateTxOptions, SignResultRaw>(tx)\n        .then(({ payload }) => {\n          const publicKey: PublicKey.Data =\n            typeof payload.result.public_key === 'string'\n              ? {\n                  type: 'tendermint/PubKeySecp256k1',\n                  value: payload.result.public_key,\n                }\n              : payload.result.public_key;\n\n          const signResult: SignResult['result'] = {\n            ...payload.result,\n            public_key: publicKey,\n          };\n\n          return {\n            ...tx,\n            result: signResult,\n            success: true,\n          };\n        })\n        .catch((error) => {\n          if (error instanceof ChromeExtensionCreateTxFailed) {\n            throw new CreateTxFailed(tx, error.message);\n          } else if (error instanceof ChromeExtensionTxFailed) {\n            throw new TxFailed(tx, error.txhash, error.message, null);\n          } else if (error instanceof ChromeExtensionUnspecifiedError) {\n            throw new TxUnspecifiedError(tx, error.message);\n          }\n          // UserDenied - chrome extension will sent original UserDenied error type\n          // All unspecified errors...\n          throw error;\n        });\n    }\n\n    throw new Error(`sign() method only available on chrome extension`);\n    // TODO implements sign() to other connect types\n  };\n\n  // ================================================================\n  // internal\n  // connect type changing\n  // ================================================================\n  private updateStates = (next: WalletStates) => {\n    const prev = this._states.getValue();\n\n    if (\n      next.status === WalletStatus.WALLET_CONNECTED &&\n      next.wallets.length === 0\n    ) {\n      console.trace('???');\n    }\n\n    if (prev.status !== next.status || !deepEqual(prev, next)) {\n      this._states.next(next);\n    }\n  };\n\n  private enableReadonlyWallet = (readonlyWallet: ReadonlyWalletController) => {\n    this.disableWalletConnect?.();\n    this.disableChromeExtension?.();\n    this.disableWebExtension?.();\n\n    if (\n      this.readonlyWallet === readonlyWallet ||\n      (this.readonlyWallet?.terraAddress === readonlyWallet.terraAddress &&\n        this.readonlyWallet.network === readonlyWallet.network)\n    ) {\n      return;\n    }\n\n    if (this.readonlyWallet) {\n      this.readonlyWallet.disconnect();\n    }\n\n    this.readonlyWallet = readonlyWallet;\n\n    this.updateStates({\n      status: WalletStatus.WALLET_CONNECTED,\n      network: readonlyWallet.network,\n      wallets: [\n        {\n          connectType: ConnectType.READONLY,\n          terraAddress: readonlyWallet.terraAddress,\n          design: 'readonly',\n        },\n      ],\n    });\n\n    this.disableReadonlyWallet = () => {\n      readonlyWallet.disconnect();\n      this.readonlyWallet = null;\n      this.disableReadonlyWallet = null;\n    };\n  };\n\n  private enableWebExtension = () => {\n    this.disableReadonlyWallet?.();\n    this.disableWalletConnect?.();\n    this.disableChromeExtension?.();\n\n    if (this.disableWebExtension || !this.webConnector) {\n      return;\n    }\n\n    const extensionSubscription = combineLatest([\n      this.webConnector.status(),\n      this.webConnector.states(),\n    ]).subscribe(([status, states]) => {\n      if (!states) {\n        return;\n      }\n\n      if (status.type === WebConnectorStatusType.READY) {\n        if (states.wallets.length > 0) {\n          const focusedWallet = states.focusedWalletAddress\n            ? states.wallets.find(\n                (itemWallet) =>\n                  itemWallet.terraAddress === states.focusedWalletAddress,\n              ) ?? states.wallets[0]\n            : states.wallets[0];\n\n          this.updateStates({\n            status: WalletStatus.WALLET_CONNECTED,\n            network: states.network,\n            wallets: [\n              {\n                connectType: ConnectType.WEB_CONNECT,\n                terraAddress: focusedWallet.terraAddress,\n                design: focusedWallet.design,\n              },\n            ],\n          });\n        }\n      } else if (status.type === WebConnectorStatusType.NO_AVAILABLE) {\n        localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n        this.updateStates(this._notConnected);\n\n        if (!status.isApproved && this.disableWebExtension) {\n          this.disableWebExtension();\n        }\n      }\n    });\n\n    localStorage.setItem(WEB_EXTENSION_CONNECTED_KEY, 'true');\n\n    const lastExtensionStatus = this.webConnector.getLastStatus();\n\n    if (\n      lastExtensionStatus.type === WebConnectorStatusType.NO_AVAILABLE &&\n      lastExtensionStatus.isApproved === false\n    ) {\n      this.webConnector.requestApproval();\n    }\n\n    this.disableWebExtension = () => {\n      localStorage.removeItem(WEB_EXTENSION_CONNECTED_KEY);\n      extensionSubscription.unsubscribe();\n      this.disableWebExtension = null;\n    };\n  };\n\n  private enableChromeExtension = () => {\n    this.disableReadonlyWallet?.();\n    this.disableWalletConnect?.();\n    this.disableWebExtension?.();\n\n    if (this.disableChromeExtension || !this.chromeExtension) {\n      return;\n    }\n\n    const extensionSubscription = combineLatest([\n      this.chromeExtension.status(),\n      this.chromeExtension.networkInfo(),\n      this.chromeExtension.terraAddress(),\n    ]).subscribe({\n      next: ([status, networkInfo, terraAddress]) => {\n        if (\n          status === ChromeExtensionStatus.WALLET_CONNECTED &&\n          typeof terraAddress === 'string' &&\n          AccAddress.validate(terraAddress)\n        ) {\n          this.updateStates({\n            status: WalletStatus.WALLET_CONNECTED,\n            network: networkInfo,\n            wallets: [\n              {\n                connectType: ConnectType.CHROME_EXTENSION,\n                terraAddress,\n                design: 'extension',\n              },\n            ],\n          });\n        } else {\n          this.updateStates(this._notConnected);\n        }\n      },\n    });\n\n    this.disableChromeExtension = () => {\n      this.chromeExtension?.disconnect();\n      extensionSubscription.unsubscribe();\n      this.disableChromeExtension = null;\n    };\n  };\n\n  private enableWalletConnect = (walletConnect: WalletConnectController) => {\n    this.disableReadonlyWallet?.();\n    this.disableChromeExtension?.();\n    this.disableWebExtension?.();\n\n    if (this.walletConnect === walletConnect) {\n      return;\n    }\n\n    if (this.walletConnect) {\n      this.walletConnect.disconnect();\n    }\n\n    this.walletConnect = walletConnect;\n\n    const subscribeWalletConnect = (\n      wc: WalletConnectController,\n    ): Subscription => {\n      return wc.session().subscribe({\n        next: (status) => {\n          switch (status.status) {\n            case WalletConnectSessionStatus.CONNECTED:\n              this.updateStates({\n                status: WalletStatus.WALLET_CONNECTED,\n                network:\n                  this.options.walletConnectChainIds[status.chainId] ??\n                  this.options.defaultNetwork,\n                wallets: [\n                  {\n                    connectType: ConnectType.WALLETCONNECT,\n                    terraAddress: status.terraAddress,\n                    design: 'walletconnect',\n                  },\n                ],\n              });\n              break;\n            default:\n              this.updateStates(this._notConnected);\n              break;\n          }\n        },\n      });\n    };\n\n    const walletConnectSessionSubscription =\n      subscribeWalletConnect(walletConnect);\n\n    this.disableWalletConnect = () => {\n      this.walletConnect?.disconnect();\n      this.walletConnect = null;\n      walletConnectSessionSubscription.unsubscribe();\n      this.disableWalletConnect = null;\n    };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}